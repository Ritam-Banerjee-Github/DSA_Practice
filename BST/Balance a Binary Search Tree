/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> inOrderList=new ArrayList<>();
    
    private void inOrder(TreeNode root){
        if(root==null) return;
        
        inOrder(root.left);
        inOrderList.add(root.val);
        inOrder(root.right);
    }
    
    private TreeNode makeBST(int start, int end){
        if(start>end) return null;
        
        int mid=(start+end)/2;
        int value=inOrderList.get(mid);
        
        TreeNode root=new TreeNode(value);
        root.left=makeBST(start,mid-1);
        root.right=makeBST(mid+1,end);
        
        return root;
    }
    
    public TreeNode balanceBST(TreeNode root) {
        inOrder(root);
        int n=inOrderList.size();
        TreeNode newRoot=makeBST(0,n-1);
        return newRoot;
        
    }
}
