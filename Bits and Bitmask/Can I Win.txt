class Solution {
    private boolean utility(int i,int total,int mask,int[] dp){
        if(total<=0) return false;
        if(dp[mask]!=-1) return dp[mask]==1?true:false;
        for(int j=0;j<i;j++){
            
            if((mask&(1<<j))==0 && !utility(i,total-(j+1),(mask|(1<<j)),dp)){
                dp[mask]=1;
                return true;
            }
        }
        dp[mask]=0;
        return false;
    }
    public boolean canIWin(int maxChoosableInteger, int desiredTotal) {
        if(desiredTotal==0) return true;
        int[] dp=new int[1<<maxChoosableInteger];
        Arrays.fill(dp,-1);
        int sum=(maxChoosableInteger*(maxChoosableInteger+1))/2;
        if(sum<desiredTotal) return false;
        return utility(maxChoosableInteger,desiredTotal,0,dp);
    }
}