class Solution {
    public long wonderfulSubstrings(String word) {
        long ans=0;
        HashMap<Long, Long> map=new HashMap<>();
        
        long currXor=0;
        map.put(currXor,1L);
        
        int n=word.length();
        for(int i=0;i<n;i++){
            char ch=word.charAt(i);
            long diff=ch-'a'; 
            long charInBits= (1<<diff);
            
            currXor=currXor^charInBits;
            
            if(map.containsKey(currXor)){
                ans+=map.get(currXor);
            }
            
            for(char ch1='a';ch1<='j';ch1++){
                long currDiff=ch1-'a';
                long currCharInBits=(1<<currDiff);
                
                long currXorNew=currXor^currCharInBits;
                
                if(map.containsKey(currXorNew)){
                      ans+=map.get(currXorNew);
                    }
            }
            
            map.put(currXor,map.getOrDefault(currXor,0L)+1L);
        }
        
        return ans;
    }
}

TC : O(N*10)