class Solution {
    public long maximumValueSum(int[] nums, int k, int[][] edges) {
        long ans=0;
        int count=0;
        int n=nums.length;
        int minNuksaan=Integer.MAX_VALUE;
        
        for(int i=0;i<n;i++){
            if((nums[i]^k)>nums[i]){
                ans+=(nums[i]^k);
                count++;
            }else{
                ans+=nums[i];
            }
            
            minNuksaan=Math.min(minNuksaan,Math.abs(nums[i]-(nums[i]^k)));   //Since we have to do it for a pair of nodes i.e., edge. SO if total count of changes is odd, we need to subtract the one which took minimum in change
        }
        
        if(count%2!=0){                            // here ^^^ (for odd number of changes)
            ans-=minNuksaan;
        }
        return ans;
    }
}
