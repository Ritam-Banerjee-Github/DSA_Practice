/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxPathSum(TreeNode root) {
        int[] maxSum=new int[1];
        maxSum[0]=Integer.MIN_VALUE;
         int res= maxPathSumUtility(root,maxSum);
         return maxSum[0];
    }
    private int maxPathSumUtility(TreeNode root, int[] maxSum){
            if(root==null){
                return 0;
            }
            int lp=Math.max(0,maxPathSumUtility(root.left,maxSum)); //Ignoring paths with negative sum
            int rp=Math.max(0,maxPathSumUtility(root.right,maxSum));
            maxSum[0]=Math.max(maxSum[0],lp+rp+root.val);
            return root.val + Math.max(lp,rp);
    }
}