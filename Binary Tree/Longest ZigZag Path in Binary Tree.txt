/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

Zig Zag -> Left, Right, Left, Right .... Or Right,Left,Right,Left ...
Approach 1:  Story To Code

class Solution {
    int ans=0;
    
    private void solve(TreeNode root, int steps, boolean goLeft){
        if(root==null) return;
        
        ans=Math.max(ans,steps);
        
        if(goLeft==true){
            solve(root.left,steps+1,false);
            solve(root.right,1,true); //New Path Starts
        }else{
            solve(root.left,1,false);  //New Path Starts
            solve(root.right,steps+1,true);
        }
    }
    public int longestZigZag(TreeNode root) {
        solve(root,0,true);
        solve(root,0,false);
        
        return ans;
    }
}

Approach 2:
class Solution {
    int ans=0;
    private void solve(TreeNode root, int left, int right){
        if(root==null) return;

        ans=Math.max(ans,Math.max(left,right));

        solve(root.left,right+1,0);
        solve(root.right,0,left+1);
    }
    public int longestZigZag(TreeNode root) {
        solve(root,0,0);
        return ans;
        
    }
}