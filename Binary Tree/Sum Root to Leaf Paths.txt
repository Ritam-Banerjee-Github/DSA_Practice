/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int solve(TreeNode root, int curr){
        if(root==null) return 0;

        curr=curr*10 + root.val;

        if(root.left==null && root.right==null) return curr;

        int l=solve(root.left,curr);
        int r=solve(root.right,curr);

        return l+r;
    }
    public int sumNumbers(TreeNode root) {
        return solve(root,0);
    }
}


OR

class Solution {
    int ans=0;
    private void solve(TreeNode root, int curr){
     if(root==null) return;

        curr=curr*10 + root.val;

        if(root.left==null && root.right==null){
            ans+=curr;
            return;
        }

        solve(root.left,curr);
        solve(root.right,curr);

        
    }
    public int sumNumbers(TreeNode root) {
      
         solve(root,0);
         return ans;
    }
}

OR

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int ans=0;
    
    private void traverse(TreeNode root,String temp){
        if(root==null) return;
        
        if(root.left==null && root.right==null){
            temp=temp+root.val; //Adding last root.val
            int length=temp.length();
            int number=0;
            for(int i=0;i<length;i++){
                int currNumber=temp.charAt(i)-'0';
                number=number*10+currNumber;
            }
            
            ans+=number;
            return;
        }
        
        if(root.left!=null) traverse(root.left,temp+root.val);
        if(root.right!=null) traverse(root.right,temp+root.val);
    }
    public int sumNumbers(TreeNode root) {
        traverse(root,"");
        return ans;
    }
}