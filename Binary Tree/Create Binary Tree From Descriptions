class Pair{
    int value;
    int isLeft;
    
    public Pair(int value, int isLeft){
        this.value=value;
        this.isLeft=isLeft;
    }
}
class Solution {
    private void makeBT(TreeNode root,Map<Integer,List<Pair>> map){
        if(root==null) return;
        
        if(!map.containsKey(root.val)) return;
        
        for(Pair p : map.get(root.val)){
            int isLeft=p.isLeft;
            int value=p.value;
            
            TreeNode node=new TreeNode(value);
            
            if(isLeft==1){
                root.left=node;
                makeBT(node,map);
            }else{
                root.right=node;
                makeBT(node,map);
            }
        }
    }
    public TreeNode createBinaryTree(int[][] descriptions) {
        Map<Integer,List<Pair>> map = new HashMap<>();
        Set<Integer> childSet=new HashSet<>();
        
        int n=descriptions.length;
        for(int i=0;i<n;i++){
            int parent=descriptions[i][0];
            int child=descriptions[i][1];
            int isLeft=descriptions[i][2];
            
            childSet.add(child);
            map.computeIfAbsent(parent, x ->new ArrayList<>()).add(new Pair(child,isLeft));
        }
        
        int rootVal=-1;
        for(int key:map.keySet()){
            if(!childSet.contains(key)){
                rootVal=key;
                break;
            }
        }
        
        TreeNode root=new TreeNode(rootVal);
        
        makeBT(root,map);
        return root;
    }
}
