import java.util.*;

public class Solution {	
	private static void parentMap(BinaryTreeNode<Integer> root,HashMap<BinaryTreeNode<Integer>,BinaryTreeNode<Integer>> map){
        Queue<BinaryTreeNode<Integer>> queue=new LinkedList<>();
		queue.add(root);
		while(!queue.isEmpty()){
			
               BinaryTreeNode<Integer> node=queue.remove();
			   if(node.left!=null){
				   queue.add(node.left);
				   map.put(node.left,node);
			   }
			   if(node.right!=null){
				   queue.add(node.right);
				   map.put(node.right,node);
			   }
		}
	}
	public static ArrayList<BinaryTreeNode<Integer>> printNodesAtDistanceK(BinaryTreeNode<Integer> root,
   		BinaryTreeNode<Integer> target, int K) {
		// Write your code here.
		ArrayList<BinaryTreeNode<Integer>> ans=new ArrayList<>();
		HashMap<BinaryTreeNode<Integer>,BinaryTreeNode<Integer>> parentMp=new HashMap<>();
		parentMap(root,parentMp);

        Queue<BinaryTreeNode<Integer>> queue=new LinkedList<>();
		queue.add(target);
		HashMap<BinaryTreeNode<Integer>,Integer> vis=new HashMap<>();
		int dist=0;
		vis.put(target,1);

		while(dist<K){
			int size=queue.size();
			for(int i=0;i<size;i++){
				BinaryTreeNode<Integer> node=queue.remove();
				if(node.left!=null && vis.get(node.left)==null){
					queue.add(node.left);
					vis.put(node.left,1);
				}
				if(node.right!=null && vis.get(node.right)==null){
					queue.add(node.right);
					vis.put(node.right,1);
				}
			     if(parentMp.get(node)!=null && vis.get(parentMp.get(node))==null){
					queue.add(parentMp.get(node));
					vis.put(parentMp.get(node),1);
				}

			}
			dist++;
		}
		while(!queue.isEmpty()){
			ans.add(queue.remove());
			
		}
		return ans;

		 
	}
}