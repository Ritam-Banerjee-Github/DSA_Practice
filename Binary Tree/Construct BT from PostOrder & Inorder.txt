import java.util.*;
public class Solution {
  private static TreeNode<Integer> buildPostOrder(int[] postOrder,int[] inOrder,HashMap<Integer,Integer> mp,int postStart, int postEnd,int inStart,int inEnd){
            if(postStart>postEnd || inStart>inEnd) return null;
            TreeNode<Integer> root=new TreeNode(postOrder[postEnd]);
            int index=mp.get(postOrder[postEnd]);
            int numsLeft=index-inStart;
            TreeNode<Integer> left=buildPostOrder(postOrder,inOrder,mp,postStart,postStart+numsLeft-1,inStart,index-1);
            TreeNode<Integer> right=buildPostOrder(postOrder,inOrder,mp,postStart+numsLeft,postEnd-1,index+1,inEnd);
            root.left=left;
            root.right=right;
         
            return root;
  }
	public static TreeNode<Integer> getTreeFromPostorderAndInorder(int[] postOrder, int[] inOrder) {
		// Write your code here.
    if(postOrder==null || inOrder==null || postOrder.length!=inOrder.length) return null;
    int n=inOrder.length;
    HashMap<Integer,Integer> mp=new HashMap<>();
    for(int i=0;i<n;i++){
      mp.put(inOrder[i],i);
    }
    TreeNode<Integer> root=buildPostOrder(postOrder,inOrder,mp,0,postOrder.length-1,0,inOrder.length-1);
       return root;
	}
}
