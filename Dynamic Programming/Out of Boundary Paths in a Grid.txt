class Solution {
    int mod=(int)(1e9+7);
    
    private int solve(int i,int j,int move,int maxMove,int m,int n,int[][][] dp){
        if(i<0 || i>=m || j<0 || j>=n) return 1;
        if(move>maxMove) return 0;

        if(dp[i][j][move]!=-1) return dp[i][j][move];
        
        int up=solve(i-1,j,move+1,maxMove,m,n,dp);
        int down=solve(i+1,j,move+1,maxMove,m,n,dp);
        int right=solve(i,j+1,move+1,maxMove,m,n,dp);
        int left=solve(i,j-1,move+1,maxMove,m,n,dp);
            
        return dp[i][j][move]=((up+down)%mod+(right+left)%mod)%mod;    
    }
    
    public int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        int[][][] dp=new int[m][n][maxMove+1];
        for(int[][] double_array:dp){
            for(int[] row: double_array){
                Arrays.fill(row,-1);
            }
        }
        
       return solve(startRow,startColumn,0,maxMove,m,n,dp)%mod; 
    }
}