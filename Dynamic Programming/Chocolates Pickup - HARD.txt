class Solution{
    int f(int i,int j1,int j2,int grid[][],int n, int m,int[][][]dp){
        
        if(j1<0 || j1>=m || j2<0 || j2>=m) return -(int)1e8;
        if(i==n-1){
            if(j1==j2) return grid[i][j1];
            else
            return grid[i][j1]+grid[i][j2];
        }
        if(dp[i][j1][j2]!=-1) return dp[i][j1][j2];
        int maxi=Integer.MIN_VALUE;
        for(int dj1=-1;dj1<=1;dj1++){
            for(int dj2=-1;dj2<=1;dj2++){
                int ans;
                if(j1==j2){
                    ans=grid[i][j1]+f(i+1,j1+dj1,j2+dj2,grid,n,m,dp);
                }
                else{
                    int value=grid[i][j1]+grid[i][j2];
                    ans=value+f(i+1,j1+dj1,j2+dj2,grid,n,m,dp);
                }
                maxi=Math.max(maxi,ans);
            }
        }
        return dp[i][j1][j2]=maxi;
    }
    public int solve(int n, int m, int grid[][]){
        // Code here
        int[][][] dp=new int[n][m][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                for(int k=0;k<m;k++){
                    dp[i][j][k]=-1;
                }
            }
        }
        return f(0,0,m-1,grid,n,m,dp);
    }
}

Time Complexity: O(N*M*M) * 9

Reason: At max, there will be N*M*M calls of recursion to solve a new problem and in every call, two nested loops together run for 9 times.

Space Complexity: O(N) + O(N*M*M)

Reason: We are using a recursion stack space: O(N), where N is the path length and an external DP Array of size ‘N*M*M’.