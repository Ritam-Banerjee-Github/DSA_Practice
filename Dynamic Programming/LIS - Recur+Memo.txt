Note : We have to take care of prev index != -1

class Solution {
    private int solve(int index, int prev, int n, int[] nums,int[][] dp){
        if(index>=n) return 0;
        
        if(prev!=-1 && dp[index][prev]!=-1) return dp[index][prev];
        
        int notTake=solve(index+1,prev,n,nums,dp);
        int take=0;
        if(prev==-1 || nums[index]>nums[prev]){
            take=1+solve(index+1,index,n,nums,dp);
        }
        
        if(prev!=-1){
            dp[index][prev]=Math.max(notTake,take);
        }
        return Math.max(notTake,take);
    }
    public int lengthOfLIS(int[] nums) {
        int n=nums.length;
        int[][] dp=new int[n+1][n+1];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        return solve(0,-1,n,nums,dp);
        
        
    }
}