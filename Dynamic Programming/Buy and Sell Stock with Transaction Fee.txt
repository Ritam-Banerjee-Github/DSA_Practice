Recursion + Memoization- ( But this will give TLE/StackOverflowError, So use Tabulation)
class Solution{
    long f(long prices[],int n, int i,int buy,long dp[][],int fee){
        if(i==n) return 0;
        if(dp[i][buy]!=-1) return dp[i][buy];
        if(buy==1){
            long take=-prices[i]+f(prices,n,i+1,0,dp,fee);
            long notTake=f(prices,n,i+1,1,dp,fee);
            return dp[i][buy]=Math.max(take,notTake);
        }
        long sold=prices[i]-fee+f(prices,n,i+1,1,dp,fee);
        long notSold=f(prices,n,i+1,0,dp,fee);
        return dp[i][buy]=Math.max(sold,notSold);
    }
    public long maximumProfit(long prices[], int N, int fee){
        // Code here
        long[][] dp = new long[N+1][2];
        for(int i=0;i<=N;i++){
         for(int j=0;j<2;j++){
             dp[i][j]=-1;
         }
        }
        
        return f(prices,N,0,1,dp,fee);
    }
}


Time Complexity: O(N*2) 

Reason: There are N*2 states therefore at max ‘N*2’ new problems will be solved and we are running a for loop for ‘N’ times to calculate the total sum

Space Complexity: O(N*2) + O(N)

Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*2)).

Tabulation -

class Solution{
    public long maximumProfit(long prices[], int N, int fee){
        // Code here
        long[][] dp = new long[N+1][2];
        for(int i=N-1;i>=0;i--){
            for(int j=0;j<2;j++){
                if(j==1){
                    long take=-prices[i]+dp[i+1][0];
                    long notTake=dp[i+1][1];
                    dp[i][j]=Math.max(take,notTake);
                }
                else{
                    long sold=prices[i]-fee+dp[i+1][1];
                    long notSold=dp[i+1][0];
                    dp[i][j]=Math.max(sold,notSold);
                }
            }
        }
        return dp[0][1];
    }
}
Time Complexity: O(N*2) 

Reason: There are two nested loops that account for O(N*2) complexity.

Space Complexity: O(N*2)

Reason: We are using an external array of size ‘N*2’. Stack Space is eliminated.