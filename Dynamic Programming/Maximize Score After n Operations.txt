class Solution {
    private int gcd(int a, int b) {
        if (b==0) return a;
        return gcd(b,a%b);
    }
    private int solve(int[] nums,int[] vis,int op,HashMap<String,Integer> dp){
        int ans=0;
        
        String key=Arrays.toString(vis)+op;
        
        if(dp.containsKey(key)) return dp.get(key);
        
        for(int i=0;i<nums.length;i++){
            if(vis[i]==1) continue;
            vis[i]=1;
            
            for(int j=i+1;j<nums.length;j++){
                if(vis[j]==1) continue;
                vis[j]=1;
                
                int currScore=op*gcd(nums[i],nums[j]);
                int remScore=solve(nums,vis,op+1,dp);
                
                ans=Math.max(ans,currScore+remScore);
                vis[j]=0;
            }
                        
           vis[i]=0;
        }
        
        dp.put(key,ans);
        return ans;
    }
    public int maxScore(int[] nums) {
        int m=nums.length;
        int[] visited=new int[m];
        
        HashMap<String,Integer> dp=new HashMap<>();
        
        return solve(nums,visited,1,dp);
        
        
    }
}

