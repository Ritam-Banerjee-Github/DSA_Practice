class Solution{
    static int f(int i, int target, int[] arr, int[][] dp){
       // This includes the case if arr[0] could be 0. If 0<=arr[i]<=10000 
       if(i==0){
            if(arr[i]==0 && target==0) return 1;
            if(arr[0]==0 || target==0) return 1;
            return 0;
        }
        
        if(dp[i][target]!=-1) return dp[i][target];
        
        int notPick=f(i-1,target,arr,dp);
        int pick=0;
        if(arr[i]<=target){
            pick=f(i-1,target-arr[i],arr,dp);
        }
        dp[i][target]=(pick==1 || notPick==1)?1:0;
        if(pick==1 || notPick==1){
            return 1;
        }
        return 0;
    }
    static int equalPartition(int N, int arr[])
    {
        // code here
        int totSum=0;
        for(int i=0;i<N;i++){
            totSum+=arr[i];
        }
        int k = totSum/2;
        // Check if total sum is odd. Then return false
        if(totSum%2!=0) return 0;
        
        int[][] dp = new int[N][k+1];
        for(int i=0;i<N;i++){
            for(int j=0;j<=k;j++){
                dp[i][j]=-1;
            }
        }
        return f(N-1,totSum/2,arr,dp); 
    }
}
Time Complexity: O(N*K) + O(N)

Reason: There are N*K states therefore at max ‘N*K’ new problems will be solved and we are running a for loop for ‘N’ times to calculate the total sum

Space Complexity: O(N*K) + O(N)

Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*K)).