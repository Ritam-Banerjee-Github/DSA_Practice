class Solution {
    private double solve(int poured, int i, int j,double[][] dp){
        if(i<0 || j<0 || i<j){
            return 0;
        }
        if(i==0 && j==0){
            return poured;
        }
        if(dp[i][j]!=-1) return dp[i][j];

        double up_left=Math.max(0,(solve(poured,i-1,j-1,dp)-1)/2.0);
        double up_right=Math.max(0,(solve(poured,i-1,j,dp)-1)/2.0);

        return dp[i][j]=up_left+up_right;

    }
    public double champagneTower(int poured, int query_row, int query_glass) {
        double[][] dp=new double[101][101];
        for(double[] row: dp){
            Arrays.fill(row,-1);
        }
        return Math.min(1.0,solve(poured,query_row,query_glass,dp));
    }
}