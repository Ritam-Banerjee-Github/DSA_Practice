class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int f(int i,int W,int[] wt, int[] val, int[][] dp){
        if(i==0){
            if(wt[0]<=W) return val[0];
            return 0;
        }
        if(dp[i][W]!=-1) return dp[i][W];
        int notTake=f(i-1,W,wt,val,dp);
        int take=Integer.MIN_VALUE;
        if(wt[i]<=W){
            take=val[i]+f(i-1,W-wt[i],wt,val,dp);
        }
        return dp[i][W]=Math.max(take,notTake);
    }
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // your code here 
         int[][] dp=new int[n][W+1];
         for(int i=0;i<n;i++){
             for(int j=0;j<=W;j++){
                 dp[i][j]=-1;
             }
         }
         return f(n-1,W,wt,val,dp);
    } 
}


Time Complexity: O(N*W)

Reason: There are N*W states therefore at max ‘N*W’ new problems will be solved.

Space Complexity: O(N*W) + O(N)

Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*W)).