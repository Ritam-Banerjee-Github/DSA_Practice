class Solution{
    private static int f(int i, int j, int[] arr, int dp[][]){
        if(i==j) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int mini=Integer.MAX_VALUE;
        for(int k=i;k<j;k++){
           int steps=(arr[i-1]*arr[k]*arr[j]) + f(i,k,arr,dp)+f(k+1,j,arr,dp);
            mini=Math.min(mini,steps);
        }
        return dp[i][j]= mini;
    }
    static int matrixMultiplication(int N, int arr[])
    {
        // code here
        int[][] dp = new int[N][N];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        return f(1,N-1,arr,dp);
    }
}

Time Complexity: O(N*N*N)

Reason: There are N*N states and we explicitly run a loop inside the function which will run for N times, therefore at max ‘N*N*N’ new problems will be solved.

Space Complexity: O(N*N) + O(N)

Reason: We are using an auxiliary recursion stack space(O(N))and a 2D array ( O(N*N)).