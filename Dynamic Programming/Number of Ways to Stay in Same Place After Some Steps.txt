class Solution {
    int mod=(int)(1e9+7);

    private int solve(int i, int steps, int n,int[][] dp){
        if(steps == 0){
            if(i==0) return 1;
            return 0;
        }
        if(dp[i][steps]!=-1) return dp[i][steps];
        int left=0;
        int right=0;
        int same=0;

        same=solve(i,steps-1,n,dp);
        if(i>0) left=solve(i-1,steps-1,n,dp);
        if(i<n-1) right=solve(i+1,steps-1,n,dp);

        return dp[i][steps]=((same+left)%mod+right)%mod;
        
    }
    public int numWays(int steps, int arrLen) {
        arrLen=Math.min(steps,arrLen); //We can take maximum steps for either one of them
        int[][] dp=new int[501][501];
        for(int[] row: dp){
            Arrays.fill(row,-1);
        }
        return solve(0,steps,arrLen,dp);
    }
}