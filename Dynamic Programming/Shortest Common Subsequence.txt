static int f(int i, int j, String s1, String s2,int dp[][]){
        if(i<0 || j<0){
            return 0;
        }
        if(dp[i][j]!=-1) return dp[i][j]; 
        if(s1.charAt(i)==s2.charAt(j)){
            return dp[i][j]=1+f(i-1,j-1,s1,s2,dp);
        }
        return dp[i][j]=Math.max(f(i-1,j,s1,s2,dp),f(i,j-1,s1,s2,dp));
    }
    static int lcs(int x, int y, String s1, String s2)
    {
        // your code here
        int[][] dp=new int[x][y];
        for(int i=0;i<x;i++){
            for(int j=0;j<y;j++){
                dp[i][j]=-1;
            }
        }
        return f(x-1,y-1,s1,s2,dp);
    }
    
}

Expected Time Complexity : O(|str1|*|str2|)
Expected Auxiliary Space: O(|str1|*|str2|) + O(|str1|+|str2|) (Recursion Stack Space)

Another metohd - By Shifting all indexes to avoid negative indexes
 
class Solution
{
    //Function to find the length of longest common subsequence in two strings.
    static int f(int i, int j, String s1, String s2,int dp[][]){
        if(i==0 || j==0){
            return 0;
        }
        if(dp[i][j]!=-1) return dp[i][j]; 
        if(s1.charAt(i-1)==s2.charAt(j-1)){
            return dp[i][j]=1+f(i-1,j-1,s1,s2,dp);
        }
        return dp[i][j]=Math.max(f(i-1,j,s1,s2,dp),f(i,j-1,s1,s2,dp));
    }
    static int lcs(int x, int y, String s1, String s2)
    {
        // your code here
        int[][] dp=new int[x+1][y+1];
        for(int i=0;i<=x;i++){
            for(int j=0;j<=y;j++){
                dp[i][j]=-1;
            }
        }
        return f(x,y,s1,s2,dp);
    }
    
}

Expected Time Complexity : O(|str1|*|str2|)
Expected Auxiliary Space: O(|str1|*|str2|) + O(|str1|+|str2|) (Recursion Stack Space)

Tabulation -
class Solution
{
    static int lcs(int x, int y, String s1, String s2)
    {
        // your code here
        int[][] dp=new int[x+1][y+1];
        for(int i=0;i<=x;i++){
            for(int j=0;j<=y;j++){
                dp[i][j]=-1;
            }
        }
        for(int i=0;i<=y;i++){
            dp[0][i]=0;
        }
        for(int i=0;i<=x;i++){
            dp[i][0]=0;
        }
        for(int i=1;i<=x;i++){
            for(int j=1;j<=y;j++){
                if(s1.charAt(i-1)==s2.charAt(j-1)){
                        dp[i][j]=1+dp[i-1][j-1];
                    }
                    else{
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                    }
                        
                }
        }
        return dp[x][y];
    }
    
}
Expected Time Complexity : O(|str1|*|str2|)
Expected Auxiliary Space: O(|str1|*|str2|)
