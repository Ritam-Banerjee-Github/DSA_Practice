We will keep the longest palindromic portion of the string intact and insert the remaining number of characters.
Minimum number of insertions = Length of String - Longest Palindromic Subsequence of String(Longest Common Subsequence b/w given String and its reverse)


class Solution{
    int f(String s1, String s2){
        int n= s1.length();
        int m = s2.length();
        int[][] dp = new int[n+1][m+1];
        for(int i=0;i<=n;i++){
            for(int j=0;j<=m;j++){
                dp[i][j]=-1;
            }
        }
        for(int i=0;i<=m;i++){
            dp[0][i]=0;
        }
        for(int i=0;i<=n;i++){
            dp[i][0]=0;
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s1.charAt(i-1)==s2.charAt(j-1)){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else
                dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[n][m];
    }
    int findMinInsertions(String S){
        // code here
        String s1=S;
        String s2=new StringBuilder(S).reverse().toString();
        int len=s1.length();
        int lps=f(s1,s2);
        return len-lps;
    }
}

Time Complexity: O(N*N)

Reason: There are two nested loops

Space Complexity: O(N*N)

Reason: We are using an external array of size (N*N). Stack Space is eliminated.