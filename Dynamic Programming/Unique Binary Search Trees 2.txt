/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private HashMap<String,List<TreeNode>> dp=new HashMap<>();
    
    private List<TreeNode> solve(int start, int end){
     List<TreeNode> result=new ArrayList<>();
        if(start>end){
            result.add(null);
            return result;
        }
        
        if(start==end){
            return List.of(new TreeNode(start));
        }
        
       
        String key=""+start+end;
        if(dp.containsKey(key)) return dp.get(key);
        
        for(int i=start;i<=end;i++){
            List<TreeNode> leftBST=solve(start,i-1);
            List<TreeNode> rightBST=solve(i+1,end);
            
            for(TreeNode left:leftBST){
                for(TreeNode right: rightBST){
                    TreeNode root=new TreeNode(i);
                    root.left=left;
                    root.right=right;
                    
                    result.add(root);
                }
            }
        }
        
        dp.put(key,result);
        
        return result;
    }
    public List<TreeNode> generateTrees(int n) {
        return solve(1,n);
    }
}