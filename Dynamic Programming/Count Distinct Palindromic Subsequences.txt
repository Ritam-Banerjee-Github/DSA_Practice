class Solution {
    int mod=(int)(1e9+7);
    public int countPalindromicSubsequences(String s) {
        int[][] dp=new int[s.length()][s.length()];
        int[] prev=new int[s.length()];
        HashMap<Character,Integer> map=new HashMap<>();
        for(int i=0;i<s.length();i++){
            char c=s.charAt(i);
            if(map.containsKey(c)){
               prev[i]=map.get(c);
            }
            else{
              prev[i]=-1;
            }
            map.put(c,i);
        }

        int[] next=new int[s.length()];
        map.clear();
        for(int i=s.length()-1;i>=0;i--){
            char c=s.charAt(i);
            if(map.containsKey(c)){
               next[i]=map.get(c);
            }
            else{
              next[i]=s.length();
            }
            map.put(c,i);
        }

        for(int g=0;g<s.length();g++){
            for(int i=0,j=g;j<s.length();i++,j++){
                if(g==0){
                   dp[i][j]=1;
                }else if(g==1){
                        dp[i][j]=2;
                }else{
                    char sc=s.charAt(i);
                    char ec=s.charAt(j);

                    if(sc!=ec){
                        dp[i][j]=((dp[i+1][j] + dp[i][j-1])%mod - dp[i+1][j-1] +mod)%mod;
                    }else{
                           int n=next[i];
                           int p=prev[j];

                           if(n>p){
                                 dp[i][j]=(2*dp[i+1][j-1])%mod +2;
                           }else if(n==p){
                                 dp[i][j]=(2*dp[i+1][j-1])%mod +1;
                           }else{
                                dp[i][j]=((2*dp[i+1][j-1])%mod - dp[n+1][p-1] +mod)%mod;
                           }
                    }
                }
            }
        }

        return dp[0][s.length()-1];
     
    }
}