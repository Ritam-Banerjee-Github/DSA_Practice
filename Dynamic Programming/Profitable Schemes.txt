class Solution {
    int mod=(int)1e9+7;

    private int solve(int i,int currProfit,int person, int n, int minProfit, int[] group, int[] profit,int[][][] dp){
          if(person>n) return 0;

          if(i==group.length){
          if(currProfit>=minProfit) return 1;
          return 0;
          }

          if(dp[i][currProfit][person]!=-1) return dp[i][currProfit][person];

          int take=solve(i+1,Math.min(minProfit,currProfit+profit[i]),person+group[i],n,minProfit,group,profit,dp);
          int notTake=solve(i+1,currProfit,person,n,minProfit,group,profit,dp);  //Refer to note section to know why we use Math.min when adding profit in take case

          return dp[i][currProfit][person]=(take+notTake)%mod;
    }
    public int profitableSchemes(int n, int minProfit, int[] group, int[] profit) {
        int[][][] dp=new int[102][102][102];
        for(int[][] rows:dp){
            for(int[] row:rows){
                Arrays.fill(row,-1);
            }
        }
        return solve(0,0,0,n,minProfit,group,profit,dp);
    }
}

Note - Since we kept adding profit,the value kept on increasing and we got index out of bounds error for profit variable in dp as the max index we defined as 102. So, instead we decided to chose the minimum of minProfit and profit as it won't hamper anything -

 java.lang.ArrayIndexOutOfBoundsException: Index 154 out of bounds for length 110
  at line 12, Solution.solve
  at line 14, Solution.solve
  at line 15, Solution.solve
  at line 15, Solution.solve
  at line 14, Solution.solve
  at line 14, Solution.solve
  at line 26, Solution.profitableSchemes