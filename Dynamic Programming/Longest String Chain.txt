class Solution {
    private boolean compareStrings(String s1, String s2){
            if(s1.length()!=s2.length()+1) return false;
			int first=0;
			int second=0;
			while(first<s1.length()){
				if(second<s2.length() && s1.charAt(first)==s2.charAt(second)){
					first++;
					second++;
				}
				else{
					first++;
				}
			}
			if(first==s1.length() && second==s2.length()) return true;

			return false;
	}
    public int longestStrChain(String[] arr) {
        int n=arr.length;
        Arrays.sort(arr,new Comparator<String>(){
			public int compare(String a, String b){
				int first=a.length();
				int second=b.length();
				if(first<second)return -1;
				if(first>second)return 1;
				return 0;
			}
		});
        int[] dp=new int[n];
		int ans=1;
		Arrays.fill(dp,1);
		for(int i=0;i<n;i++){
			for(int j=0;j<i;j++){
				if(compareStrings(arr[i],arr[j])==true && dp[j]+1>dp[i]){
					dp[i]=dp[j]+1;
					ans=Math.max(ans,dp[i]);
				}
			}
		}
		return ans;
    }
}
