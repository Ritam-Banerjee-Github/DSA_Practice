class Solution
{
    int f(int i, int j, String s1, String s2, int dp[][]){
        if(i==0 && j==0) return 1;
        if(i==0 && j>0) return 0;
        if(i>0 && j==0){
            for(int ii=1;ii<=i;ii++){
                if(s1.charAt(ii-1)!='*') return 0;
                }
           return 1;
        }
        if(dp[i][j]!=-1) return dp[i][j];
        
        if(s1.charAt(i-1)==s2.charAt(j-1) || s1.charAt(i-1)=='?') return dp[i][j]=f(i-1,j-1,s1,s2,dp);
        
        if(s1.charAt(i-1)=='*'){
            return dp[i][j]=(f(i-1,j,s1,s2,dp)==1 || f(i,j-1,s1,s2,dp)==1)?1:0; //Either * match with no character, or let * match with only 1 character
        }
        return dp[i][j]=0;
    }
    int wildCard(String pattern, String str)
    {
        // Your code goes here
        int n=pattern.length();
        int m=str.length();
        int[][] dp=new int[n+1][m+1];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        return f(n,m,pattern,str,dp);
    }
}

Time Complexity: O(N*M)

Reason: There are N*M states therefore at max ‘N*M’ new problems will be solved.

Space Complexity: O(N*M) + O(N+M)

Reason: We are using a recursion stack space(O(N+M)) and a 2D array ( O(N*M)).