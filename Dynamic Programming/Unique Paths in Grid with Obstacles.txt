class Solution {
   static int mod=(int)1e9+7;
   static int f(int i,int j,int[][] grid, int[][] dp){
       if(i==0 && j==0) return 1;
       if(i<0 || j<0 || grid[i][j]==0) return 0;

       if(dp[i][j]!=-1) return dp[i][j];

       int left= (f(i,j-1,grid,dp))%mod;
       int up= (f(i-1,j,grid,dp))%mod;
       
       return dp[i][j]=(left+up)%mod;
   }
    static int uniquePaths(int n, int m, int[][] grid) {
        // code here
        if(grid[0][0]==0 || grid[n-1][m-1]==0) return 0;
        int[][] dp=new int[n][m];
        // Arrays.fill(dp,-1);
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                dp[i][j]=-1;
            }
        }
        return f(n-1,m-1,grid,dp);
    }
}


Expected Time Complexity: O(n*m)
Expected Auxiliary Space: O(n*m)