class Solution {
    private int solve(int i,int n,int[] arr, int k,int[] dp){
        if(i>=n) return 0;
        
        if(dp[i]!=-1) return dp[i];
        
        int currSum=Integer.MIN_VALUE;
        int currMax=Integer.MIN_VALUE;
        int currCount=0;
        
        for(int ind=i;ind<=Math.min(n-1,i+k-1);ind++){
            currMax=Math.max(currMax,arr[ind]);
            currCount++;
            
            currSum=Math.max(currSum,currMax*currCount+solve(ind+1,n,arr,k,dp));
              
        }
        
        return dp[i]=currSum;
    }
    public int maxSumAfterPartitioning(int[] arr, int k) {
        int n=arr.length;
        int[] dp=new int[n+1];
        Arrays.fill(dp,-1);
        return solve(0,n,arr,k,dp);
    }
}