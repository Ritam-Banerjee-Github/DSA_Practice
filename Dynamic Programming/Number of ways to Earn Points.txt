class Solution {
    int mod=(int)(1e9+7);
    
    private int solve(int i, int n, int target, int[][] types,int[][] dp){
        if(i>=n){
            if(target==0) return 1;
            return 0;
        }
    
        if(dp[i][target]!=-1) return dp[i][target];
        
        int notTake=solve(i+1,n,target,types,dp);
        
        int take=0;
        
        int score=0;
        
        for(int j=1;j<=types[i][0];j++){
            score=j*types[i][1];
            
            if(score>target) break;
            
            take=(take+solve(i+1,n,target-score,types,dp))%mod;
        }
        
        return dp[i][target]=(take+notTake)%mod;
    }
    public int waysToReachTarget(int target, int[][] types) {
        int n=types.length;
        int[][] dp=new int[n+1][target+1];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        return solve(0,n,target,types,dp);
    }
}
