class Solution {
    private long solve(int i, int j, int n, int m, List<Integer> robot, List<Integer>expandedList, long[][] dp){
         if(i>=n) return 0;
         if(j>=m) return (long)10e12;
         
         if(dp[i][j]!=-1) return dp[i][j];

         long take=Math.abs(expandedList.get(j) - robot.get(i)) + solve(i+1,j+1,n,m,robot,expandedList,dp);
         long notTake=solve(i,j+1,n,m,robot,expandedList,dp);

         return dp[i][j]=Math.min(take,notTake);
    }
    public long minimumTotalDistance(List<Integer> robot, int[][] factory) {
        Collections.sort(robot);
        int n=robot.size();
        List<Integer> expandedList=new ArrayList<>();
        for(int i=0;i<factory.length;i++){
            int position=factory[i][0];
            int count=factory[i][1];

            while(count>0){
                expandedList.add(position);
                count--;
            }
        }

        Collections.sort(expandedList);
        int m=expandedList.size();
        
        long[][] dp=new long[n+1][m+1];
        for(long[] row:dp){
            Arrays.fill(row,-1);
        }
        return solve(0,0,n,m,robot,expandedList,dp);
    }
}
