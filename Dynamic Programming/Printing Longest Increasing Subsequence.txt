import java.util.*;
public class Solution {
    public static List< Integer > printingLongestIncreasingSubsequence(int []arr, int x) {
        // Write Your Code Here
        int n=arr.length;
		int[] dp=new int[n];
        int[] hash=new int[n];
        int last_index=0;
		Arrays.fill(dp,1);
        
		for(int i=0;i<n;i++){
                        hash[i]=i;
			for(int j=0;j<i;j++){
			     if(arr[i]>arr[j] && dp[i]<dp[j]+1){
					  dp[i]=dp[j]+1;
                                          hash[i]=j;
				 }   
			}
            
		}
        int maxi=-1;
        for(int i=0;i<n;i++){
            if(dp[i]>maxi){
                last_index=i;
                maxi=dp[i];
            }
        }
        List<Integer> ans=new ArrayList<>();
        ans.add(arr[last_index]);
        while(hash[last_index]!=last_index){
             last_index=hash[last_index];
             ans.add(arr[last_index]);
        }
        Collections.reverse(ans);
        return ans;

    }
}

Time Complexity: O(N*N)

Reason: There are two nested loops.

Space Complexity: O(N)

Reason: We are only using two rows of size ‘N’.