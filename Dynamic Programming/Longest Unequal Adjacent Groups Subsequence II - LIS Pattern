class Solution {
    public List<String> getWordsInLongestSubsequence(String[] words, int[] groups) {
        int n=groups.length;
        List<String> ans=new ArrayList<>();
        int[] dp=new int[n];
        Arrays.fill(dp,1);
        int[] parent=new int[n];
        Arrays.fill(parent,-1);
        int longestSubsequenceIndex=0;
        int longestSubsequenceLength=0;

        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
                if(groups[i]!=groups[j] && words[i].length()==words[j].length() && checkHamingDistance(words[i],words[j])){
                  if(1+dp[j]>dp[i]){
                    dp[i]=1+dp[j];
                    parent[i]=j;
                    if(longestSubsequenceLength<dp[i]){
                        longestSubsequenceLength=dp[i];
                        longestSubsequenceIndex=i;
                    }
                  }  
                }
            }
        }

        int index=longestSubsequenceIndex;
        while(parent[index]!=-1){
            ans.add(words[index]);
            index=parent[index];
        }
        
        ans.add(words[index]);
        Collections.reverse(ans);
        return ans;
    }

    private boolean checkHamingDistance(String s1, String s2){
        int count=0;
        for(int i=0;i<s1.length();i++){
            if(s1.charAt(i)!=s2.charAt(i)) count++;

            if(count>1) return false;
        }

        return true;
    }
}
