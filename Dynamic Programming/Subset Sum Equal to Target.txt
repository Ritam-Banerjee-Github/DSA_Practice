class Solution{

   static Boolean f(int i,int arr[],int target,int dp[][]){
       if(i==0) return arr[i]==target;
       if(target==0) return true;
       if(dp[i][target]!=-1) return dp[i][target]==1?true:false;
       
       Boolean notpick=f(i-1,arr,target,dp);
       Boolean pick=false;
       if(arr[i]<=target){
           pick=f(i-1,arr,target-arr[i],dp);
       }
       dp[i][target]=pick||notpick?1:0;
       return pick||notpick;
   }

    static Boolean isSubsetSum(int N, int arr[], int sum){
        // code here
        int[][] dp=new int[N][sum+1];
        for(int i=0;i<N;i++){
            for(int j=0;j<=sum;j++){
                dp[i][j]=-1;
            }
        }
        return f(N-1,arr,sum,dp);
    }
}

//K=target
Time Complexity: O(N*K)

Reason: There are N*K states therefore at max ‘N*K’ new problems will be solved.

Space Complexity: O(N*K) + O(N)

Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*K)).