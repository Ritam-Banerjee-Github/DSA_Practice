class Solution {
    private int solve(int i,int remWalls,int[] cost, int[] time,int[][] dp){
        if(remWalls<=0) return 0;

        if(i>=cost.length) return (int)(1e9); //Unpainted walls still remaining. So return something big
         
         if(dp[i][remWalls]!=-1) return dp[i][remWalls];

        int paint=cost[i]+solve(i+1,remWalls-1-time[i],cost,time,dp);
        int notPaint=solve(i+1,remWalls,cost,time,dp);

        return dp[i][remWalls]=Math.min(paint,notPaint);
    }
    public int paintWalls(int[] cost, int[] time) {
        int n=cost.length;
        int[][] dp=new int[n+1][n+1];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        return solve(0,n,cost,time,dp);
    }
}