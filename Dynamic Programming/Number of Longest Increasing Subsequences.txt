class Solution{
    public int NumberofLIS(int N, int arr[]){
        // Code here
        int[]dp = new int[N]; dp[i] -> dp[i] denotes Length of Longest Increasing Subsequence ending at i
        int[] count=new int[N];
        Arrays.fill(count,1);
        Arrays.fill(dp,1);
       
        int maxi=0;
        for(int i=0;i<N;i++){
            for(int j=0;j<i;j++){
                if(arr[j]<arr[i] && 1+dp[j]>dp[i]){
                    dp[i]=1+dp[j];
                    count[i]=count[j];
                }
                else
                if(arr[j]<arr[i] && 1+dp[j]==dp[i]){
                    count[i]+=count[j];    
                }
                maxi=Math.max(maxi,dp[i]);
            }
        }
        int ans=0;
        for(int i=0;i<N;i++){
            if(dp[i]==maxi) ans+=count[i];
        }
        return ans;
    }
}
Time Complexity: O(N*N)

Reason: There are two nested loops that are run twice.

Space Complexity: O(N)

Reason: We are only using two rows of size n.