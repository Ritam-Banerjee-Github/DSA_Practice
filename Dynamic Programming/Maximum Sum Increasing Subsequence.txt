Recursion + Memoization

class Solution {
    int f(int i, int arr[], int dp[]){
        if(i<0) return 0;
        if(i==0) return arr[0];
        if(i==1) return arr[0]+arr[1];
        
        if(dp[i]!=-1) return dp[i];
        
        return dp[i]=Math.max(f(i-1,arr,dp),Math.max(arr[i]+f(i-2,arr,dp),arr[i]+arr[i-1]+f(i-3,arr,dp)));
    }
    int findMaxSum(int arr[], int n) {
        // code here
        int[] dp = new int[n];
        Arrays.fill(dp,-1);
        return f(n-1,arr,dp);
    }
}

Tabulation -

int findMaxSum(int arr[], int n) {
        // code here
        int[] dp = new int[n];
        Arrays.fill(dp,-1);
        dp[0]=arr[0];
        dp[1]=arr[0]+arr[1];
        dp[2]=Math.max(arr[0]+arr[1],Math.max(arr[0]+arr[2],arr[1]+arr[2]));
        for(int i=3;i<n;i++){
            int first=dp[i-1];
            int second=arr[i]+dp[i-2];
            int third=arr[i]+arr[i-1]+dp[i-3];
            dp[i]=Math.max(first,Math.max(second,third));
        }
        return dp[n-1];
    }