import java.util.*;

public class Solution {
    public static String findLCS(int n, int m, String s1, String s2){
        // Write your code here.
        String ans="";
        int[][] dp=new int[n+1][m+1];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        for(int i=0;i<=n;i++){
			dp[i][0]=0;
		}
		for(int j=0;j<=m;j++){
			dp[0][j]=0;
		}
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s1.charAt(i-1)==s2.charAt(j-1)){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else{
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        int len=dp[n][m];
        if(len==0)return ans; //If len is 0

        for(int i=0;i<len;i++){
            ans=ans+"$";
        }
        StringBuilder str=new StringBuilder(ans); // We cannot replace character in default String. So we convert String to StringBuilder to use its str.setCharAt(index,s1.charAt(i)) method to replace

        int index=len-1;
        int i=n;
        int j=m;
        while(i>0&&j>0){
            if(s1.charAt(i)==s2.charAt(j)){
                str.setCharAt(index,s1.charAt(i));
                index--;
                i--;
                j--;
            }
            else
            if(dp[i-1][j]>dp[i][j-1]){
                i--;
            }
            else{
                j--;
            }
        }
         return str.toString(); //Convert from StringBuilder to String when returning. Since methode return type is String
    }
}


Time Complexity: O(N*M)

Reason: There are two nested loops

Space Complexity: O(N*M)

Reason: We are using an external array of size ‘N*M’. Stack Space is eliminated.