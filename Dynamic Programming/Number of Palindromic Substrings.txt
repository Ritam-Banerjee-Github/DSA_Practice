Recursion + Memoization :
class Solution {
    
    private boolean checkPalindrome(int i,int j, String s,int[][] dp){  //Check for Palindrome using Recursion instead of iterative method
        if(i>j) return true;
       
        if(dp[i][j]!=-1) return dp[i][j]==1?true:false;
        
        if(s.charAt(i)==s.charAt(j)){
            boolean result=checkPalindrome(i+1,j-1,s,dp);
            dp[i][j]=(result==true)?1:0;
            return result;
        }
        
        dp[i][j]=0;
        return false;
    }
    public int countSubstrings(String s) {
        int n=s.length();
        int count=0;
        int[][] dp=new int[1001][1001];
        
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        for(int i=0;i<n;i++){                     //This is how we generate all substrings using brute force
            for(int j=i;j<n;j++){
                if(checkPalindrome(i,j,s,dp)) count++;
            }
        }
        
        return count;
    }
}


Optimized : This is the template which solves most of palindrome questions

class Solution {
    public int countSubstrings(String s) {
        int ans=0;
        int n=s.length();
        int[][] dp=new int[1001][1001];
        
        for(int len=1;len<=n;len++){          //For each length of substring from 1 till n.
            for(int i=0;i+len-1<n;i++){
                int j=i+len-1;
                
                if(len==1){
                    dp[i][j]=1;
                }else if(len==2){
                    dp[i][j]=(s.charAt(i+1)==s.charAt(i))?1:0;
                }else{
                    dp[i][j]=(s.charAt(i)==s.charAt(j) && dp[i+1][j-1]==1)?1:0;
                }
                
                if(dp[i][j]==1){
                    ans++;
                }
            }
        }
        
        return ans;
    }
}

TC - O(N^2)
SC - O(N^2)
