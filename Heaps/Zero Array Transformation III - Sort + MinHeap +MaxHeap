class Solution {
    public int maxRemoval(int[] nums, int[][] queries) {
        int ans=0;
        int n=nums.length;
        int querySize=queries.length;
        int usedQueryCount=0;

         Arrays.sort(queries,new Comparator<int[]>(){
           public int compare(int[] a, int[] b){
            if(a[0]<b[0]) return -1;
            if(a[0]>b[0]) return 1;
            return 0;
           }
         });

         PriorityQueue<Integer> pastUsed=new PriorityQueue<>();
         PriorityQueue<Integer> maxHeap=new PriorityQueue<>(Collections.reverseOrder());
         int j=0;

         for(int i=0;i<n;i++){
            while(j<querySize && queries[j][0]==i){
                maxHeap.add(queries[j][1]);
                j++;
            }
            if(pastUsed.size()>0){
                nums[i]-=pastUsed.size();
            }

            while(nums[i]>0 && !maxHeap.isEmpty() && maxHeap.peek()>=i){
                nums[i]-=1;
                int index=maxHeap.remove();
                usedQueryCount++;
                pastUsed.add(index);
            }

            if(nums[i]>0) return -1;

            while(!pastUsed.isEmpty() && pastUsed.peek()<=i){
                pastUsed.remove();
            }

         }

        ans=querySize-usedQueryCount;
        return ans;
    }
}
