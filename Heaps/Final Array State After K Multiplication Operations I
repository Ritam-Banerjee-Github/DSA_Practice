class Pair{
    int value;
    int index;
    
    public Pair(int value, int index){
        this.value=value;
        this.index=index;
    }
}

class Solution {
    public int[] getFinalState(int[] nums, int k, int multiplier) {
        int n=nums.length;
        int[] ans=new int[n];
        
        PriorityQueue<Pair> pq=new PriorityQueue<>(new Comparator<Pair>(){
            public int compare(Pair a, Pair b){
                if(a.value<b.value) return -1;
                else if(a.value>b.value) return 1;
                else{
                    if(a.index<b.index) return -1;
                    return 1;
                }
            }
        });
        
        for(int i=0;i<n;i++){
            pq.add(new Pair(nums[i],i));
        }
        
        
        while(k>0){
            Pair p=pq.remove();
            int val=p.value;
            int newVal=val*multiplier;
            
            pq.add(new Pair(newVal,p.index));
            k--;
        }
        
        while(!pq.isEmpty()){
            Pair p=pq.remove();
            ans[p.index]=p.value;
        }
        
        return ans;
    }
}
