class Pair{
    char ch;
    int count;
    
    public Pair(int count, char ch){
        this.ch=ch;
        this.count=count;
    }
}
class Solution {
    public String longestDiverseString(int a, int b, int c) {
        PriorityQueue<Pair> pq=new PriorityQueue<>(new Comparator<Pair>(){
           public int compare(Pair a, Pair b){
               if(a.count>b.count) return -1;
               if(a.count<b.count) return 1;
               return 0;
           } 
        });
        
        if(a!=0) pq.add(new Pair(a,'a'));
        if(b!=0) pq.add(new Pair(b,'b'));
        if(c!=0) pq.add(new Pair(c,'c'));
        
        StringBuilder ans=new StringBuilder();
        
        while(!pq.isEmpty()){
            Pair p=pq.remove();
            
            int currLength=ans.length();
            
            if(currLength>=2){
                if(ans.charAt(currLength-1) == p.ch && ans.charAt(currLength-2) == p.ch){
                    
                    if(pq.isEmpty()) break;
                    
                    Pair q=pq.remove();
                    ans.append(q.ch);
                    q.count=q.count-1;
                    if(q.count>0){
                        pq.add(q);
                    }
                    
                    pq.add(p);
                    
                }else{
                    ans.append(p.ch);
                    p.count=p.count-1;
                    if(p.count!=0) pq.add(p);
                }
            }else{
                ans.append(p.ch);
                p.count=p.count-1;
                if(p.count!=0) pq.add(p);
            }
        }
        
        return ans.toString();
    }
}
