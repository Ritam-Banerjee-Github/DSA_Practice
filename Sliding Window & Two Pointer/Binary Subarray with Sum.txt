class Solution
{
    private int atmost(int arr[], int goal, int n){
        int sum=0;
        int start=0;
        int count=0;
        for(int end=0;end<n;end++){
            sum+=arr[end];
            while(sum>goal){
                sum-=arr[start];
                start++;
            }
            count+=end-start+1;
        }
        return count;
    }
    int numberOfSubarrays(int arr[], int N, int target){
        // code here
       return atmost(arr,target,N)-atmost(arr,target-1,N);
    }
}

TC - O(N)
SC - O(1)

OR 

class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {
        int n=nums.length;
        HashMap<Integer,Integer> map=new HashMap<>();
        map.put(0,1);
        
        int ans=0;
        int sum=0;
        
        for(int i=0;i<n;i++){
           sum+=nums[i];
            int rem=sum-goal;
            
            if(map.containsKey(rem)){
                ans+=map.get(rem);
            }
            
            map.put(sum,map.getOrDefault(sum,0)+1);
        }
        
        return ans;
    }
}