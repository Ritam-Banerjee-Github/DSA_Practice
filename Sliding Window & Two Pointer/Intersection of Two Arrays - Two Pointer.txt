BRUTE:

class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        int n=nums1.length;
        int m=nums2.length;
        
        HashSet<Integer> set1=new HashSet<>();
        HashSet<Integer> set2=new HashSet<>();
        
        for(int i=0;i<n;i++){
            set1.add(nums1[i]);
        }
        
        for(int i=0;i<m;i++){
            set2.add(nums2[i]);
        }
        
        List<Integer> list=new ArrayList<Integer>();
        for(int x:set1){
            if(set2.contains(x)) list.add(x);
        }
        
        int[] ans=new int[list.size()];
        
        for(int i=0;i<list.size();i++){
            ans[i]=list.get(i).intValue();
        }
        
        return ans;
    }
}

Optimal:

class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        int n=nums1.length;
        int m=nums2.length;
        
        HashSet<Integer> set=new HashSet<>();
        
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        
        int i=0;
        int j=0;
        
        while(i<n && j<m){
            if(nums1[i]<nums2[j]){
                i++;
            }else if(nums1[i]>nums2[j]){
                j++;
            }else if(nums1[i]==nums2[j]){
                set.add(nums1[i]);
                i++;
                j++;
            }
        }
        
        int[] ans=new int[set.size()];
        int k=0;
        
        for(int x:set){
          ans[k]=x;
            k++;
        }
        
        return ans;
    }
}