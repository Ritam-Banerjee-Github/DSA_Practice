class Solution {
    public String minWindow(String s, String t) {
        int m=s.length();
        int n=t.length();
        
        if(n>m) return "";
        
        HashMap<Character,Integer> map=new HashMap<>();
        
        for(int i=0;i<n;i++){
            map.put(t.charAt(i),map.getOrDefault(t.charAt(i),0)+1);
            
        }
        
        int i=0;
        int j=0;
        
        int requiredCount=n;
        int start_index=0;
        int minWindowSubstring=Integer.MAX_VALUE;
        
        
        while(j<m){
            char ch=s.charAt(j);
            if(map.get(ch)!=null && map.get(ch)>0) requiredCount--;
            
            map.put(ch,map.getOrDefault(ch,0)-1); //Very important to do -1 for all elements, otherwise you wont get answer as the index will be positive
            
            while(requiredCount==0){
                int currWindowSize=j-i+1;
                if(minWindowSubstring>currWindowSize){
                    minWindowSubstring=currWindowSize;
                    start_index=i;
                }
                
                map.put(s.charAt(i),map.get(s.charAt(i))+1);  //Must do for all elements
                
                if(map.get(s.charAt(i))>0) requiredCount++;  //Game Changer
                
                i++;
            }
            
            j++;
        }
        
        return minWindowSubstring==Integer.MAX_VALUE?"":s.substring(start_index,start_index+minWindowSubstring);
    }
}