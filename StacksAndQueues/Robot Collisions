//Using Stack
//T.C : O(nlogn)
//T.C : O(n)

MY CODE :
//Using Stack
//T.C : O(nlogn)
//T.C : O(n)
class Data{
    int position;
    int health;
    char ch;
    int originalIndex;
    
    public Data(int position,int health,char ch, int index){
        this.position=position;
        this.health=health;
        this.ch=ch;
        this.originalIndex=index;
    }
}
class Solution {
    public List<Integer> survivedRobotsHealths(int[] positions, int[] healths, String directions) {
        int n = positions.length;
        Stack<Data> stack=new Stack<>();
        List<Data> list=new ArrayList<>();
        
        for(int i=0;i<n;i++){
            list.add(new Data(positions[i],healths[i],directions.charAt(i),i));
        }
        
        Collections.sort(list,new Comparator<Data>(){
           public int compare(Data a, Data b){
               if(a.position<b.position) return -1;
               if(a.position>b.position) return 1;
               return 0;
           } 
        });
        
        for(Data d:list){
            if(d.ch=='L'){
                if(stack.isEmpty() || stack.peek().ch=='L'){
                    stack.push(d);
                }else if(stack.isEmpty() || stack.peek().ch=='R'){
                    
                    while(!stack.isEmpty() && stack.peek().ch=='R'){
                        Data popped=stack.pop();
                        
                        if(popped.health==d.health){
                            break;
                        }else if(popped.health>d.health){
                            popped.health-=1;
                            stack.push(popped);
                            break;
                        }else if(popped.health<d.health){
                            d.health-=1;
                            if(stack.isEmpty() || (stack.peek().ch=='L' && d.health>0)){
                                stack.push(d);
                                break;
                            }
                        }
                    }
                    
                    
                }
            }else if(d.ch=='R'){
                    stack.push(d);
            }
        }
        
        List<Data> afterList=new ArrayList<>(stack.size());
        
        while(!stack.isEmpty()){
            afterList.add(stack.pop());
        }
        
         Collections.sort(afterList,new Comparator<Data>(){
           public int compare(Data a, Data b){
               if(a.originalIndex<b.originalIndex) return -1;
               if(a.originalIndex>b.originalIndex) return 1;
               return 0;
           } 
        });
        
        
        List<Integer> ans=new ArrayList<>(afterList.size());
        for(Data d:afterList){
            ans.add(d.health);
        }
        
        return ans;
    }
}

Optimized Solution:
class Solution {
    public List<Integer> survivedRobotsHealths(int[] positions, int[] healths, String directions) {
        int n = positions.length;
        Integer[] indices = new Integer[n];
        
        for (int i = 0; i < n; i++) {
            indices[i] = i;
        }

        Stack<Integer> stack = new Stack<>();

        Arrays.sort(indices, (i, j) -> Integer.compare(positions[i], positions[j]));

        List<Integer> result = new ArrayList<>();
        
        for (int currentIndex : indices) {
            if (directions.charAt(currentIndex) == 'R') {
                stack.push(currentIndex);
            } else {
                while (!stack.isEmpty() && healths[currentIndex] > 0) {
                    int topIndex = stack.pop();

                    if (healths[topIndex] > healths[currentIndex]) {
                        healths[topIndex] -= 1;
                        healths[currentIndex] = 0;
                        stack.push(topIndex);
                    } else if (healths[topIndex] < healths[currentIndex]) {
                        healths[currentIndex] -= 1;
                        healths[topIndex] = 0;
                    } else {
                        healths[currentIndex] = 0;
                        healths[topIndex] = 0;
                    }
                }
            }
        }

        for (int i = 0; i < n; i++) {
            if (healths[i] > 0) {
                result.add(healths[i]);
            }
        }

        return result;
    }
}
