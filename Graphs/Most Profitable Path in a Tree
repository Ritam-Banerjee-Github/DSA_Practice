class Solution {
    Map<Integer,Integer> bobMap=new HashMap<>();
    private int ans=Integer.MIN_VALUE;

    public int mostProfitablePath(int[][] edges, int bob, int[] amount) {
        int n=edges.length+1;
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }

        for(int i=0;i<n-1;i++){
            int u=edges[i][0];
            int v=edges[i][1];

            adj.get(u).add(v);
            adj.get(v).add(u);
        }

        int[] visited=new int[n];
        dfsBob(bob,0,visited,adj);

        visited=new int[n];
        dfsAlice(0,0,0,adj,visited,amount);
        return ans;
    }

    private boolean dfsBob(int node, int time, int[] visited, List<List<Integer>> adj){
       visited[node]=1;
       bobMap.put(node,time);

       if(node==0) return true;

       for(int next:adj.get(node)){
        if(visited[next]!=1){
            if(dfsBob(next,time+1,visited,adj)==true) return true;
        }
       }

       visited[node]=0;
       bobMap.remove(node);

       return false;
    }

    private void dfsAlice(int node, int time, int value, List<List<Integer>> adj, int[] visited,int[] amount){
        visited[node]=1;

        if(bobMap.containsKey(node) && bobMap.get(node)==time){
            value+=(amount[node]/2);
        }else if(!bobMap.containsKey(node) || bobMap.get(node) > time){
            value+=amount[node];
        }

        //How to chek leaf node in a tree with adjacency list of graph?
        if(adj.get(node).size()==1 && node!=0){ //0 means root node
            ans=Math.max(ans,value);
            return;
        }

        for(int next:adj.get(node)){
            if(visited[next]==0){
               dfsAlice(next,time+1,value,adj,visited,amount);
            }
        }
    }
}
