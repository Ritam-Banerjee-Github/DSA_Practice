import java.util.*;
class Pair{
    int num;
    int step;
    public Pair(int num,int step){
        this.num=num;
        this.step=step;
    }
}
public class Solution {
    public static int minimumOperations(int n, int start, int end, int []a) {
        // Write your code here
        int mod=(int)1e3;
        if(start==end) return 0;
     
        int[] count=new int[1000];
        Arrays.fill(count,(int)1e9);
        count[start]=0;
        Queue<Pair> q=new LinkedList<>();
        q.add(new Pair(start,0));
        while(!q.isEmpty()){
            Pair p=q.peek();
            int num=p.num;
            int step=p.step;
            q.remove();

            for(int i=0;i<n;i++){
                int curr=(num*a[i])%mod;
                if(step+1<count[curr]){
                    count[curr]=step+1;
                    if(curr==end) return count[curr];
                    q.add(new Pair(curr,step+1));
                }
            }
        }
        return -1;
    }
}