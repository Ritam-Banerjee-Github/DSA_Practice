class Solution {
    // Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        ArrayList<Integer> bfs = new ArrayList<Integer>();
        Queue<Integer> q = new LinkedList<>();
        boolean[] vis=new boolean[V];
        q.add(0);
        vis[0]=true;
        
        while(!q.isEmpty()){
            Integer start=q.poll();
            bfs.add(start);
            
            for(Integer next:adj.get(start)){
                if(vis[next]==false){
                    vis[next]=true;
                    q.add(next);
                }
            }
        }
        return bfs;
    }
}

TC -
1. Undirected - O(N or V) + O(2E) - Loop runs for each node once + for its neighbours, which can be computed to be the summation of degrees for each node i.e., degree of graph.
2. Directed -  O(N or V) + O(E) - Depends  

SC- O(2N) ~ O(N)