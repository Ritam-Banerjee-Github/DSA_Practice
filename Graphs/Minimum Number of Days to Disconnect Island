class Solution {
    
    private void dfs(int i, int j, int[][] grid, int[][] vis){
    
        vis[i][j]=1;
        
        int[] delrow={0,1,0,-1};
        int[] delcol={1,0,-1,0};
        
        for(int k=0;k<4;k++){
            int nrow=i+delrow[k];
            int ncol=j+delcol[k];
            
            if(nrow>=0 && nrow<grid.length && ncol>=0 && ncol<grid[0].length && grid[nrow][ncol]==1 && vis[nrow][ncol]!=1){
                dfs(nrow,ncol,grid,vis);
            }
        }
    }
    
    private int checkByEachChange(int[][] grid){
        int n=grid.length;
        int m=grid[0].length;
        
        int[][] vis=new int[n][m];
        
        int island=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1 && vis[i][j]!=1){
                    island++;
                    if(island>1 || island==0) return 0;
                    dfs(i,j,grid,vis);
                }
            }
        }
        
        return island;
    }
    public int minDays(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        
        int[][] vis=new int[n][m];
        
        int island=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1 && vis[i][j]!=1){
                    island++;
                    if(island>1 || island==0) return 0;
                    dfs(i,j,grid,vis);
                }
            }
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    grid[i][j]=0;
                    int num=checkByEachChange(grid);
                    grid[i][j]=1;
                    if(num==0 || num>1) return 1;
                }
            }
        }
        
        if(island==0) return 0;
        return 2;
    }
}
