class Pair{
    int row;
    int col;
    int distance;
    
    public Pair(int row,int col, int distance){
        this.row=row;
        this.col=col;
        this.distance=distance;
    }
}
class Solution {

    int shortestPath(int[][] grid, int[] source, int[] destination) {
        
            // Edge Case: if the source is only the destination.
        if(source[0] == destination[0] && 
           source[1] == destination[1]) return 0;

        // Your code here
        int n=grid.length;
        int m=grid[0].length;
        int[][] dist=new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                dist[i][j]=(int)(1e9);
            }
        }
        Queue<Pair> q=new LinkedList<Pair>();
        int srcrow=source[0];
        int srccol=source[1];
        
        dist[srcrow][srccol]=0;
        q.add(new Pair(srcrow,srccol,0));
        int[] delrow={-1,0,1,0};
        int[] delcol={0,1,0,-1};
        
        while(!q.isEmpty()){
            int row=q.peek().row;
            int col=q.peek().col;
            int distance=q.peek().distance;
            q.remove();
            
            for(int i=0;i<4;i++){
                int nrow=row+delrow[i];
                int ncol=col+delcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==1 && distance+1<dist[nrow][ncol]){
                     dist[nrow][ncol]=distance+1;
                    if(nrow==destination[0] && ncol==destination[1]) return dist[nrow][ncol];
                   
                    q.add(new Pair(nrow,ncol,distance+1));
                }
            }   
        }
        
        return -1;
        
    }
}

Time Complexity: O( 4*N*M ) { N*M are the total cells, for each of which we also check 4 adjacent nodes for the shortest path length}, Where N = No. of rows of the binary maze and M = No. of columns of the binary maze.

Space Complexity: O( N*M ), Where N = No. of rows of the binary maze and M = No. of columns of the binary maze.