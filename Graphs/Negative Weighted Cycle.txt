
class Solution
{
    public int isNegativeWeightCycle(int n, int[][] edges)
    {
        //code here
        int dist[] = new int[n];
        for(int i=0;i<n;i++){
            dist[i]=(int)(1e9);
        }

        dist[0]=0;

        for(int i=0;i<n-1;i++){
          for(int j=0;j<edges.length;j++){
            int u=edges[j][0];
            int v=edges[j][1];
            int wt=edges[j][2];
            
            if(dist[u]+wt<dist[v]){
                dist[v]=wt+dist[u];
            }
          } 
        }
        
        for(int i=0;i<edges.length;i++){
            int u=edges[i][0];
            int v=edges[i][1];
            int wt=edges[i][2];
            
            if(dist[u]+wt<dist[v]){
                return 1;
            }
        }
        
        return 0;
    }
}
Time Complexity: O(V*E), where V = no. of vertices and E = no. of Edges.

Space Complexity: O(V) for the distance array which stores the minimized distances.
