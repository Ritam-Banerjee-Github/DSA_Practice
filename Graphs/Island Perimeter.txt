Only count the ones which are either going out of bounds or pointing to a 0 cell in all 4 directions for every index with value 1

class Solution {
    int ans=0;
    private void dfs(int row, int col, int[][] vis, int[][] grid, int n, int m){
        vis[row][col]=1;
        
        int[] delRow={0,1,0,-1};
        int[] delCol={1,0,-1,0};
        
        for(int i=0;i<4;i++){
            int nrow=row+delRow[i];
            int ncol=col+delCol[i];
            
            if(nrow>=n || nrow<0 || ncol>=m || ncol<0 || grid[nrow][ncol]==0){
                ans++;
                continue;
            }
            
            if(grid[nrow][ncol]==1 && vis[nrow][ncol]!=1){
                dfs(nrow,ncol,vis,grid,n,m);
            }
        }
    }
    public int islandPerimeter(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        
        int[][] vis=new int[n][m];
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1 && vis[i][j]!=1){
                    dfs(i,j,vis,grid,n,m);
                }
            }
        }
        
        return ans;
    }
}