// Just find the minimum weight in the component. It is given in question constraint : here is at least one path between 1 and n ans all edges can be visited multiple times along the same path

class Pair{
    int node;
    int distance;
    
    public Pair(int node, int distance){
        this.distance=distance;
        this.node=node;
    }
}

class Solution {
    int ans=Integer.MAX_VALUE;
    
    private void dfs(int node,int[] vis, List<List<Pair>> adj){
        vis[node]=1;
        
        for(Pair p : adj.get(node)){
            int next=p.node;
            int distance=p.distance;
            
            ans=Math.min(ans,distance);
            if(vis[next]!=1) dfs(next,vis,adj);
        }
    }
    
    public int minScore(int n, int[][] roads) {
        List<List<Pair>> adj=new ArrayList<>();
        
        for(int i=0;i<=n;i++){
            adj.add(new ArrayList<Pair>());
        }
        
        for(int i=0;i<roads.length;i++){
            int u=roads[i][0];
            int v=roads[i][1];
            int wt=roads[i][2];
            
            adj.get(u).add(new Pair(v,wt));
            adj.get(v).add(new Pair(u,wt));
        }
        
        int[] vis=new int[n+1]; 
      
        dfs(1,vis,adj);
      
        return ans;
    }
}
