class Solution {
    int ans=0;
    int count=0;
    
    private double findDistance(int x1, int y1, int x2, int y2) {
        return Math.sqrt((Math.pow((x1-x2),2)) + Math.pow((y1-y2),2));
    }
    private void dfs(int node, int[] vis, List<List<Integer>> adj){
        vis[node]=1;
        count++;
        
        for(int next:adj.get(node)){
            if(vis[next]!=1) dfs(next,vis,adj);
        }
    }
    public int maximumDetonation(int[][] bombs) {
        int n=bombs.length;
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        
       
        
        //Creating adj
        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                if(i == j) continue;
                double distance = findDistance(bombs[i][0],bombs[i][1], bombs[j][0], bombs[j][1]);
                
                if(bombs[i][2] * 1.0 >= distance) {
                    //edge i->j
                    adj.get(i).add(j);
                }
            }
        }
        
        
        int[] vis=new int[n];
        
        for(int i=0;i<n;i++){
                dfs(i,vis,adj);
                ans=Math.max(ans,count);
                count=0;
                Arrays.fill(vis,0);
        }
        
        return ans;
    }
}