Approach 1 : Brute DFS
class Solution {
    public int findMaxFish(int[][] grid) {
        int ans=0;
        int n=grid.length;
        int m=grid[0].length;

        for(int i=0;i<n;i++){
          for(int j=0;j<m;j++){
            if(grid[i][j]>0){
                int[][] visited=new int[n][m];
                ans=Math.max(ans,dfs(i,j,n,m,grid,visited));
            }
          }
        }

        return ans;
    }

    private int dfs(int i, int j, int n, int m, int[][] grid, int[][] visited){
         int score=grid[i][j];
         visited[i][j]=1;
         int[] delrow=new int[]{0,1,0,-1};
         int[] delcol=new int[]{1,0,-1,0};

         for(int k=0;k<4;k++){
            int nrow=i+delrow[k];
            int ncol=j+delcol[k];

            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]>0 && visited[nrow][ncol]!=1){
                score+=dfs(nrow,ncol,n,m,grid,visited);
            }
         }
         
         return score;
    }
}
