class Solution {
    // Function to detect cycle in an undirected graph.
    private boolean isCycleDFS(int node, int parent, ArrayList<ArrayList<Integer>> adj, int[] vis){
        vis[node]=1;
        for(int neighbour: adj.get(node)){
            if(vis[neighbour]!=1){
                if(isCycleDFS(neighbour,node,adj,vis)==true){
                   return true; 
                }
            }
            else
            if(parent!=neighbour){
                return true;
            }
        }
         return false;
    }
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        int[] vis = new int[V];
        int parent=-1;
        for(int i=0;i<V;i++){
            if(vis[i]!=1){
            if(isCycleDFS(i,parent,adj,vis)==true) return true;
            }
        }
        
        return false;
    }
}

TC - O(N+2E) or O(V + 2E) as for every node we visit all its adjacent nodes. This is summation of all degrees of the graph + O(N) for extra for loop for disconnected components. ( Note - Its not multiplication but addition, as its not like all nodes are disconnected and we have to run it for each loop)
SC - O(N) for vis array + O(N) for recursion stack space which can be worst case for skewed like graph
