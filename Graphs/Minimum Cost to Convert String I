class Solution {
    private void floydWarshal(int[][] matrix){
        for(int via=0;via<26;via++){
            for(int i=0;i<26;i++){
                for(int j=0;j<26;j++){
                    if(matrix[i][via]!= Integer.MAX_VALUE&& matrix[via][j]!=Integer.MAX_VALUE) matrix[i][j]=Math.min(matrix[i][j],matrix[i][via]+matrix[via][j]); //To avoid overbound of size of int. Othersie will get wrong result
                }
            }
        }
    }

    public long minimumCost(String source, String target, char[] original, char[] changed, int[] cost) {
        long ans = 0;
        int[][] matrix = new int[26][26];

        for (int[] row : matrix) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }

        for (int i = 0; i < original.length; i++) {
            char initial = original[i];
            char change = changed[i];
            int weight = cost[i];
            matrix[initial - 'a'][change - 'a'] = Math.min(matrix[initial - 'a'][change - 'a'], weight);
        }

        floydWarshal(matrix);

        for (int i = 0; i < source.length(); i++) {
            if (source.charAt(i) == target.charAt(i)) continue;
            int costToChange = matrix[source.charAt(i) - 'a'][target.charAt(i) - 'a'];
            if (costToChange == Integer.MAX_VALUE) return -1;
            ans += costToChange;
        }

        return ans;
    }
}
