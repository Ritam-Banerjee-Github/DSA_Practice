class Solution
{
    //Function to return Breadth First Traversal of given graph.
    int timer=1;
    
    private void dfs(int node, int parent, int[] vis, int[] t, int[] low, HashSet<Integer> set, 
    ArrayList<ArrayList<Integer>> adj){
        vis[node]=1;
        t[node]=timer;
        low[node]=timer;
        timer++;
        
        int childForFirstNode=0;
        
        for(int next:adj.get(node)){
            if(next==parent) continue;
            
            if(vis[next]!=1){
                childForFirstNode++;
                dfs(next,node,vis,t,low,set,adj);
                low[node]=Math.min(low[node],low[next]);
                
                if(t[node]<=low[next] && parent!=-1){
                    set.add(node);
                }
                
            }else if(vis[next]==1){
                low[node]=Math.min(low[node],t[next]);
            }
        }
        
        if(parent==-1 && childForFirstNode>1){
            set.add(node);
        }
    }
    public ArrayList<Integer> articulationPoints(int V,ArrayList<ArrayList<Integer>> adj)
    {
        ArrayList<Integer> ans=new ArrayList<>();
        HashSet<Integer> set=new HashSet<>();
        
        int[] t=new int[V];
        int[] low=new int[V];
        int[] vis=new int[V];
        
        for(int i=0;i<V;i++){
            if(vis[i]==0){
                dfs(i,-1,vis,t,low,set,adj);
            }
        }
        
        if(set.size()>0){
            for(int node:set){
                ans.add(node);
            }
            Collections.sort(ans); //Since it is asking to send ans in sorted order
            return ans;
        }
        
        ans.add(-1);
        return ans;
        
    }
}

TC : O(V+2E)

Alernate solution instead of sorting in the end :
class Solution {
    private int timer = 1;
    private void dfs(int node, int parent, int[] vis,
                     int tin[], int low[], int[] mark,
                     ArrayList<ArrayList<Integer>> adj) {
        vis[node] = 1;
        tin[node] = low[node] = timer;
        timer++;
        int child = 0;
        for (Integer it : adj.get(node)) {
            if (it == parent) continue;
            if (vis[it] == 0) {
                dfs(it, node, vis, tin, low, mark, adj);
                low[node] = Math.min(low[node], low[it]);
                // node --- it
                if (low[it] >= tin[node] && parent != -1) {
                    mark[node] = 1;
                }
                child++;
            } else {
                low[node] = Math.min(low[node], tin[it]);
            }
        }
        if (child > 1 && parent == -1) {
            mark[node] = 1;
        }
    }
    //Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> articulationPoints(int n,
            ArrayList<ArrayList<Integer>> adj) {
        int[] vis = new int[n];
        int[] tin = new int[n];
        int[] low = new int[n];
        int[] mark = new int[n];
        for (int i = 0; i < n; i++) {
            if (vis[i] == 0) {
                dfs(i, -1, vis, tin, low, mark, adj);
            }
        }
        ArrayList<Integer> ans = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (mark[i] == 1) {
                ans.add(i);
            }
        }
        if (ans.size() == 0) {
            ans.add(-1);
        }
        return ans;
    }
}