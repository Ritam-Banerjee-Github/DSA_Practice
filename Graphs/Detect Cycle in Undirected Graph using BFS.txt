class Pair{
    int value;
    int parent;
    
    public Pair(int value, int parent){
        this.value=value;
        this.parent=parent;
    }
}
class Solution {
    // Function to detect cycle in an undirected graph.
    private boolean isCycleBFS(int src, ArrayList<ArrayList<Integer>> adj, int[] vis){
        vis[src]=1;
        Queue<Pair> q=new LinkedList<Pair>();
        q.add(new Pair(src,-1));
        
        while(!q.isEmpty()){
            int value=q.peek().value;
            int parent=q.peek().parent;
            q.remove();
            
            for(int neighbour: adj.get(value)){
                if(vis[neighbour]!=1){
                    vis[neighbour]=1;
                    q.add(new Pair(neighbour,value));
                }
                else
                if(parent!=neighbour){
                    return  true;
                }
            }
        }
        return false;
    }
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        int[] vis = new int[V];
        for(int i=0;i<V;i++){
            if(vis[i]!=1){
            if(isCycleBFS(i,adj,vis)==true) return true;
            }
        }
        
        return false;
    }
}

TC - O(N + 2E) + O(N)
SC - O(N)