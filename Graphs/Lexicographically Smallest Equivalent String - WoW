class Solution {
    int minChar=Integer.MAX_VALUE;

    public String smallestEquivalentString(String s1, String s2, String baseStr) {
        String ans="";
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<26;i++){
            adj.add(new ArrayList<>());
        }

        for(int i=0;i<s1.length();i++){
            int u=s1.charAt(i)-'a';
            int v=s2.charAt(i)-'a';

            adj.get(u).add(v);
            adj.get(v).add(u);
        }


        for(int i=0;i<baseStr.length();i++){
            int tempChar=baseStr.charAt(i)-'a';
            minChar=tempChar;
            int[] visited=new int[26];
            dfs(minChar,adj,visited);

            if(minChar<tempChar){
              ans+=(char)(minChar+'a');
            }else{
              ans+=(char)(tempChar+'a');
            }

            minChar=Integer.MAX_VALUE;
        }

        return ans;

    }

    private void dfs(int node, List<List<Integer>> adj, int[] visited){
        visited[node]=1;
        minChar=Math.min(minChar,node);

        for(int next:adj.get(node)){
            if(visited[next]!=1){
                dfs(next,adj,visited);
            }
        }
    }
}
