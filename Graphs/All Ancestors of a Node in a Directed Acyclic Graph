class Solution {
    public List<List<Integer>> getAncestors(int n, int[][] edges) {
        List<List<Integer>> ans=new ArrayList<>();
        
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList());
            ans.add(new ArrayList());
        }
        
        int[] inDegree=new int[n];
        
        for(int i=0;i<edges.length;i++){
            int u=edges[i][0];
            int v=edges[i][1];
            
            adj.get(u).add(v);
            inDegree[v]++;
        }
        
        Queue<Integer> queue=new LinkedList<>();
        List<Integer> topoSort=new ArrayList<>();
        
        for(int i=0;i<n;i++){
            if(inDegree[i]==0){
                queue.add(i);
            }
        }
        
        while(!queue.isEmpty()){
            int node=queue.remove();
            topoSort.add(node);
            
            for(int next:adj.get(node)){
                inDegree[next]--;
                if(inDegree[next]==0){
                    queue.add(next);
                }
            }
        }
        
        
        List<Set<Integer>> vec = new ArrayList<>(n);
        for (int i = 0; i < n; i++) {
            vec.add(new HashSet<>());
        }
        for (int node : topoSort) {
            for (int v : adj.get(node)) {
                vec.get(v).add(node); // adding node ancestor
                vec.get(v).addAll(vec.get(node)); // adding ancestors of node
            }
        }

        for (int i = 0; i < n; i++) {
            ans.set(i, new ArrayList<>(vec.get(i)));
            Collections.sort(ans.get(i));
        }

        
        return ans;
    }
}
