class Pair{
    int node;
    int real;
    
    public Pair(int node, int real){
        this.node=node;
        this.real=real;
    }
}

class Solution {
    int ans=0;
    private void dfs(int node, int parent, List<List<Pair>> adj){
        for(Pair p : adj.get(node)){
            int next=p.node;
            int real=p.real;
        
            if(next!=parent){     //We can use visited array as well, but there are no cycle so just keeping track of parent will work
                
              if(real==1) ans++;  //This means we have a real edge moving away from 0, since we are doing dfs from 0, so count++. If real!=1. then the edge was going towards 0, we added the fake edge to travel to that node for going to that node's neighbours
               
              dfs(next,node,adj);
        
            }
        }
    }
    
    public int minReorder(int n, int[][] connections) {
        List<List<Pair>> adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<Pair>());
        }
        
        for(int i=0;i<connections.length;i++){
            int u=connections[i][0];
            int v=connections[i][1];
            
            adj.get(u).add(new Pair(v,1)); // 1 means real, 0 means we added
            adj.get(v).add(new Pair(u,0)); //We are adding this fake edge so tht we can travel to all other nodes
        }
        
        dfs(0,-1,adj);
        return ans;
    }
}