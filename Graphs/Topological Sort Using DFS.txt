// Topological Sort only works for DAG (Directed Acyclic Graphs)

class Solution
{
    static void dfs(int node, ArrayList<ArrayList<Integer>> adj, int vis[], Stack<Integer> stack){
        vis[node]=1;

        for(int next:adj.get(node)){
            if(vis[next]==0){
                dfs(next,adj,vis,stack);
            }
        }
        
        stack.push(node);
    }
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        int[] vis=new int[V];
        Stack<Integer> stack=new Stack<Integer>();
        
        for(int i=0;i<V;i++){
          if(vis[i]!=1){
              dfs(i,adj,vis,stack);
          }   
        }
        
        int[] ans=new int[V];
        int i=0;

        while(!stack.isEmpty()){
            ans[i++]=stack.peek();
            stack.pop();
        }
        return ans;
    }
}

TC - O(V+E)
SC - O(V)