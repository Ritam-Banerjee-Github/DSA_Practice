class Pair{
    int first;
    int second;
    public Pair(int first,int second){
        this.first=first;
        this.second=second;
    }
}
class Solution {
    // Function to find the number of islands.
    private void bfs(int i, int j, char[][] grid, boolean[][] vis){
        Queue<Pair> q=new LinkedList<Pair>();
        vis[i][j]=true;
        q.add(new Pair(i,j));
        int n=grid.length;
        int m=grid[0].length;
        
        while(!q.isEmpty()){
           int row=q.peek().first;
           int col=q.peek().second;
           q.remove();
           
           for(int delrow=-1;delrow<=1;delrow++){
               for(int delcol=-1;delcol<=1;delcol++){
                   int nrow=row+delrow;
                   int ncol=col+delcol;

//To avoid ArrayIndexOutOdBoundsException, we need to give check for grid indexes first, so that if its out of bounds then condition will fail at start and grid[nrow][ncol] will not give ArrayIndexOutOdBoundsException, 

                  if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]=='1' && vis[nrow][ncol]!=true){
                       vis[nrow][ncol]=true;
                       q.add(new Pair(nrow,ncol));
                   }
               }
           }
        }
    }
    public int numIslands(char[][] grid) {
        // Code here
        int n=grid.length;
        int m=grid[0].length;
        boolean[][] vis=new boolean[n][m];
        int count=0;
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(vis[i][j]!=true && grid[i][j]=='1'){
                    count++;
                    bfs(i,j,grid,vis);
                }
            }
        }
        
        return count;
    }
}

SC- O(n*m)
TC - O(n*m)