class Solution {
    static int numProvinces(ArrayList<ArrayList<Integer>> adj, int V) {
        // code here. adj is adjacency matrix with input like {{1,0,1},{0,1,0},{1,0,1}}. 1 means edge(including self edge).

// Conver adjacency matrix to adjacency list start

        ArrayList<ArrayList<Integer>> adjList = new ArrayList<ArrayList<Integer>>();
        for(int i=0;i<V;i++){
            adjList.add(new ArrayList<Integer>());
        }
        
        for(int i=0;i<V;i++){
            for(int j=0;j<V;j++){
                if(i!=j && adj.get(i).get(j)==1){
                    adjList.get(i).add(j);
                    adjList.get(j).add(i);
                }
            }
        }


// Convert adjacency matrix to adjacency list end.

        boolean[] vis = new boolean[V];
        int count =0;
        for(int i=0;i<V;i++){
            if(vis[i]==false){
                count++;
                dfs(adjList,vis,i);
            }
        }
        
        return count;
    }
    static void dfs(ArrayList<ArrayList<Integer>> adjList, boolean[] vis, int i){
        vis[i]=true;
        for(Integer node:adjList.get(i)){
            if(vis[node]==false){
                dfs(adjList,vis,node);
            }
        }
    }
};