class Solution{
    static void dfs(char a[][], int[][] vis, int row, int col){
        vis[row][col]=1;
        int n=a.length;
        int m=a[0].length;
        int[] delrow={-1,0,1,0};
        int[] delcol={0,1,0,-1};
        
        for(int i=0;i<4;i++){
            int nrow=row+delrow[i];
            int ncol=col+delcol[i];
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && vis[nrow][ncol]!=1 && a[nrow][ncol]=='O'){
                dfs(a,vis,nrow,ncol);
            }
        }
    }
    static char[][] fill(int n, int m, char a[][])
    {
        // code here
        int[][] vis = new int[n][m];
        
        // 1st row
        for(int j=0;j<m;j++){
            if(a[0][j]=='O' && vis[0][j]!=1){
                dfs(a,vis,0,j);
            }
        }
        // Last row
        for(int j=0;j<m;j++){
            if(a[n-1][j]=='O' && vis[n-1][j]!=1){
                  dfs(a,vis,n-1,j);
            }
        }
        //1st col
        for(int i=0;i<n;i++){
            if(a[i][0]=='O' && vis[i][0]!=1){
                dfs(a,vis,i,0);
            }
        }
        
        // Last Col
        for(int i=0;i<n;i++){
            if(a[i][m-1]=='O' && vis[i][m-1]!=1){
                dfs(a,vis,i,m-1);
            }
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(a[i][j]=='O' && vis[i][j]!=1){
                    a[i][j]='X';
                }
            }
        }
        
        return a;
    }
}