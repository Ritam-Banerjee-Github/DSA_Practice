class Solution {
    int maxOneTree2=0;
    int maxZeroTree2=0;
    int maxOneTree1=0;
    int maxZeroTree1=0;

    public int[] maxTargetNodes(int[][] edges1, int[][] edges2) {
        int n=edges1.length+1;
        int m=edges2.length+1;

        List<List<Integer>> adj1=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj1.add(new ArrayList<>());
        }

        List<List<Integer>> adj2=new ArrayList<>();
        for(int i=0;i<m;i++){
            adj2.add(new ArrayList<>());
        }

        int[] ans=new int[n];

        for(int i=0;i<n-1;i++){
            int u=edges1[i][0];
            int v=edges1[i][1];

            adj1.get(u).add(v);
            adj1.get(v).add(u);
        }
 
        for(int i=0;i<m-1;i++){
            int u=edges2[i][0];
            int v=edges2[i][1];

            adj2.get(u).add(v);
            adj2.get(v).add(u);
        }
        

        int[] visited1=new int[n];
        int[] markNode=new int[n];
        
        dfsTree1(0,0,adj1,visited1,markNode);

         int[] visited2=new int[m];
        dfsTree2(0,0,adj2,m,visited2);

        int maxValueTree2=Math.max(maxOneTree2,maxZeroTree2);

        for(int i=0;i<n;i++){
            if(markNode[i]==1){
                ans[i]=maxValueTree2+maxOneTree1;
            }else{
                ans[i]=maxValueTree2+maxZeroTree1;
            }
        }


        return ans;
    }

    private void dfsTree2(int node,int currLevel, List<List<Integer>> adj, int m, int[] visited){
        if(currLevel==1) maxOneTree2++;
        if(currLevel==0) maxZeroTree2++;
        visited[node]=1;

        for(int next:adj.get(node)){
            if(visited[next]!=1){
                dfsTree2(next,1-currLevel,adj,m,visited);
            }
        }
    }

    private void dfsTree1(int node,int currLevel, List<List<Integer>> adj, int[] visited, int[] markNode){
        if(currLevel==0) maxZeroTree1++;
        if(currLevel==1) maxOneTree1++;
        visited[node]=1;
        markNode[node]=currLevel;

        for(int next:adj.get(node)){
            if(visited[next]!=1){
                dfsTree1(next,1-currLevel,adj,visited,markNode);
            }
        }
    }
}
