class Solution
{
    static int[] findOrder(int n, int m, ArrayList<ArrayList<Integer>> prerequisites) 
    {
        // add your code here
        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<Integer>());
        }
    
        for(int i=0;i<m;i++){
            adj.get(prerequisites.get(i).get(1)).add(prerequisites.get(i).get(0));
        }
        Queue<Integer> q= new LinkedList<Integer>();
        int[] inDegree=new int[n];
        
        for(int i=0;i<n;i++){
            for(int next:adj.get(i)){
                inDegree[next]++;
            }
        }
        
        for(int i=0;i<inDegree.length;i++){
            if(inDegree[i]==0){
                q.add(i);
            }
        }
        
    
        int[] topo=new int[n];
        int index=0;
        
        while(!q.isEmpty()){
            int node=q.peek();
            q.remove();
            topo[index++]=node;
            
            for(int next:adj.get(node)){
                inDegree[next]--;
                if(inDegree[next]==0){
                    q.add(next);
                }
            }
        }

        if(index==n) return topo;
        int[] arr={};
        return arr;
    }
}

TC - O(n+m)
SC - O(n+m)