class Pair{
    int row;
    int col;

    public Pair(int row, int col){
        this.row=row;
        this.col=col;
    }
}
class Solution {
    public int[][] highestPeak(int[][] isWater) {
        int n=isWater.length;
        int m=isWater[0].length;

        Queue<Pair> q=new LinkedList<>();

        int[][] ans=new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(isWater[i][j]==1){
                    ans[i][j]=0;
                    q.add(new Pair(i,j));
                }else{
                    ans[i][j]=-1; //Mark unvisited in same matrix
                }
            }
        }


        while(!q.isEmpty()){
            int size=q.size();

            for(int i=0;i<size;i++){
                Pair p=q.remove();
                int row=p.row;
                int col=p.col;

                int[] delRow=new int[]{0,1,0,-1};
                int[] delCol=new int[]{1,0,-1,0};


                for(int k=0;k<4;k++){
                    int nrow=row+delRow[k];
                    int ncol=col+delCol[k];

                    if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && ans[nrow][ncol]==-1){
                        q.add(new Pair(nrow,ncol));
                        ans[nrow][ncol]=ans[row][col]+1;
                    }
                }
            }
        }

        return ans;
    }
}
