Use given image[] array and ans[] array.No need for visited as ans[] will take care of it

class Solution

{
    private void dfs(int row, int col, int[][] image,int[][] ans,int n,
    int m, int newColor, int[] delrow, int[] delcol, int inicolor){
        ans[row][col]=newColor;

        for(int i=0;i<4;i++){
            int nrow=row + delrow[i];
            int ncol = col+ delcol[i];
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && image[nrow][ncol]==inicolor
            && ans[nrow][ncol]!=newColor){
                dfs(nrow,ncol,image,ans,n,m,newColor,delrow,delcol,inicolor);
            }
        }
    }
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor)
    {
        // Code here 
        int inicolor = image[sr][sc];
        int n=image.length;
        int m=image[0].length;
        int[][] ans =image;
        int[] delrow={-1,0,1,0};
        int[] delcol={0,1,0,-1};
        dfs(sr,sc,image,ans,n,m,newColor,delrow,delcol,inicolor);
        return ans;
        
    }
}

TC & SC - O(n*m)