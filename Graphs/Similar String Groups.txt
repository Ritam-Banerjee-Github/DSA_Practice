class Solution {
    private void dfs(int node, int[] vis, List<List<Integer>> adj){
        vis[node]=1;
        
        for(int next:adj.get(node)){
            if(vis[next]!=1) dfs(next,vis,adj);
        }
    }
    
    private boolean isSimilar (String x, String y){
        int n=x.length();
        int count=0;
        for(int i=0;i<n;i++){
            if(x.charAt(i)!=y.charAt(i)) count++;
            if(count>2) return false;
        }
        
        return true;
    }
    
    public int numSimilarGroups(String[] strs) {
        int n=strs.length;
        List<List<Integer>> adj=new ArrayList<>();
        
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(isSimilar(strs[i],strs[j])){
                    adj.get(i).add(j);
                    adj.get(j).add(i);
                }
            }
        }
        
        int[] vis=new int[n];
        int ans=0;
        for(int i=0;i<n;i++){
            if(vis[i]!=1){
                ans++;
                dfs(i,vis,adj);
            }
        }
        
        return ans;
    }
}