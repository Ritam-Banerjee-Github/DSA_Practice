class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        List<List<Integer>> adj=new ArrayList<>();

        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }

        int m=edges.length;

        for(int i=0;i<m;i++){
            int u=edges[i][0];
            int v=edges[i][1];

            adj.get(u).add(v);
            adj.get(v).add(u);
        }
         
        int[] vis=new int[n];
        Arrays.fill(vis,-1);

        Queue<Integer> queue=new LinkedList<>();
        queue.add(source);
        vis[source]=1;

        while(!queue.isEmpty()){
            Integer node=queue.peek();
            if(node==destination) return true;
            queue.remove();

            for(int next:adj.get(node)){
                if(vis[next]==-1){
                    queue.add(next);
                    vis[next]=1;
                }
            }
        }

        return false;

    }
}