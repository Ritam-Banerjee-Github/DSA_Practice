class Pair{
    int node;
    int weight;
    
    public Pair(int node, int weight){
        this.node=node;
        this.weight=weight;
    }
}
class Solution{
	static int spanningTree(int V, int E, int edges[][]){
	    // Code Here. 
	    ArrayList<ArrayList<Pair>> adj=new ArrayList<ArrayList<Pair>>();
	    for(int i=0;i<V;i++){
	        adj.add(new ArrayList<Pair>());
	    }

	    int n=edges.length;

	    for(int i=0;i<n;i++){
	        int u=edges[i][0];
	        int v=edges[i][1];
	        int wt=edges[i][2];
	        
	        adj.get(u).add(new Pair(v,wt));
	        adj.get(v).add(new Pair(u,wt));
	    }

	    int[] vis=new int[V];
	    int sum=0;
	    PriorityQueue<Pair> pq=new PriorityQueue<Pair>((x,y) -> x.weight-y.weight);

	    pq.add(new Pair(0,0));

	    while(!pq.isEmpty()){
	        int node=pq.peek().node;
	        int weight=pq.peek().weight;
	        pq.remove();
	        
	        if(vis[node] == 1 ) continue;
	        
	            vis[node]=1;
	            sum += weight; 

	        for(Pair p:adj.get(node)){
	            int v=p.node;
	            int w=p.weight;
	            if(vis[v]!=1){
	                pq.add(new Pair(v,w));
	            }
	        }
	    }

	    return sum;
	}
}

Time Complexity: O(E*logE) + O(E*logE)~ O(E*logE), where E = no. of given edges.
The maximum size of the priority queue can be E so after at most E iterations the priority queue will be empty and the loop will end. Inside the loop, there is a pop operation that will take logE time. This will result in the first O(E*logE) time complexity. Now, inside that loop, for every node, we need to traverse all its adjacent nodes where the number of nodes can be at most E. If we find any node unvisited, we will perform a push operation and for that, we need a logE time complexity. So this will result in the second O(E*logE). 

Space Complexity: O(E) + O(V), where E = no. of edges and V = no. of vertices. O(E) occurs due to the size of the priority queue and O(V) due to the visited array. If we wish to get the mst, we need an extra O(V-1) space to store the edges of the most.