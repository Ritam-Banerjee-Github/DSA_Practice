class Solution
{
  public String findOrder(String [] dict, int N, int K)
    {
        // Write your code here
        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
        for(int i=0;i<K;i++){
            adj.add(new ArrayList<Integer>());
        }
        for(int i=0;i<N-1;i++){
            String s1=dict[i];
            String s2=dict[i+1];
            int len = Math.min(s1.length(),s2.length());
            for(int j=0;j<len;j++){
                if(s1.charAt(j)!=s2.charAt(j)){
                    adj.get(s1.charAt(j) - 'a').add(s2.charAt(j) - 'a');
                    break;
                }
            }
        }
        
        int[] inDegree = new int[K];
        Queue<Integer> q = new LinkedList<Integer>();
        
        for(int i=0;i<K;i++){
            for(int next:adj.get(i)){
                inDegree[next]++;
            }
        }
        
        for(int i=0;i<K;i++){
            if(inDegree[i]==0){
                q.add(i);
            }
        }
        List<Integer> topo = new ArrayList<Integer>();
        while(!q.isEmpty()){
            int node=q.peek();
            q.remove();
            topo.add(node);
            
            for(int next:adj.get(node)){
                inDegree[next]--;
                if(inDegree[next]==0){
                    q.add(next);
                }
            }
        }
        
        String ans="";
        for(int i:topo){
            ans=ans+(char)(i+(int)('a'));
        }
        
        return ans;
    
    }
}

TC - O(N * |S| + K) , where |S| denotes maximum length.
SC - O(K)