class Pair{
    int first;
    int second;
    int timer;
    
    public Pair(int first, int second, int timer){
        this.first=first;
        this.second=second;
        this.timer=timer;
    }
}
class Solution
{
    //Function to find minimum time required to rot all oranges. 
    public int orangesRotting(int[][] grid)
    {
        // Code here
        int n=grid.length;
        int m=grid[0].length;
        int[][] vis=new int[n][m];
        int cntFresh=0;
        
        Queue<Pair> q= new LinkedList<Pair>();
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    q.add(new Pair(i,j,0));
                    vis[i][j]=2;
                }
                else{
                    vis[i][j]=0;
                }
                if(grid[i][j]==1){
                    cntFresh++;
                }
            }
        }
        
            int[] delrow={-1,0,1,0};
            int[] delcol ={0,1,0,-1};
            int tm=0,cnt=0;
            
        while(!q.isEmpty()){
            int row=q.peek().first;
            int col=q.peek().second;
            int t=q.peek().timer;
            q.remove();
            
            tm=Math.max(tm,t);
            
            for(int i=0;i<4;i++){
                int nrow=row+delrow[i];
                int ncol=col+delcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==1 && vis[nrow][ncol]!=2){
                    vis[nrow][ncol]=2;
                    q.add(new Pair(nrow,ncol,t+1));
                    cnt++;
                }
                
            }
        
        }
        if(cnt!=cntFresh) return -1;
        
        return tm;
    }
}

TC & SC - O(n*m)