class Solution {
    int lastRow;
    int lastCol;
    int[][] vis;
    
    private void dfs(int row, int col, int[][] land,int n,int m){
        vis[row][col]=1;
        
        lastRow=Math.max(lastRow,row);
        lastCol=Math.max(lastCol,col);
        
        int[] delRow={0,1,0,-1};
        int[] delCol={1,0,-1,0};
        
        for(int i=0;i<4;i++){
            int newRow=row+delRow[i];
            int newCol=col+delCol[i];
            
            if(newRow>=0 && newRow<n && newCol>=0 && newCol<m && land[newRow][newCol]==1 && vis[newRow][newCol]!=1){
                dfs(newRow,newCol,land,n,m);
            }
        }
    }
    
    public int[][] findFarmland(int[][] land) {
        int n=land.length;
        int m=land[0].length;
        vis=new int[n][m];
        
        List<int[]> list=new ArrayList<>();
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                   if(land[i][j]==1 && vis[i][j]!=1){
                        int firstRow=i;
                        int firstCol=j;
                        lastRow=0;
                        lastCol=0;

                        dfs(i,j,land,n,m);
                        list.add(new int[]{firstRow,firstCol,lastRow,lastCol});
                       }
                    }
                }
        
         int[][] ans=new int[list.size()][4];
         int index=0; 
        
         for(int i=0;i<list.size();i++){
             ans[index]=list.get(i);
             index++;
         }                        
                             
         return ans;                   
                             
     }
}    