class Data{
    int row;
    int col;
    int time;

    public Data(int row, int col, int time){
        this.row=row;
        this.col=col;
        this.time=time;
    }
}

class Solution {
    public int minimumTime(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;

         if (grid[0][1] > 1 && grid[1][0] > 1) return -1;

        PriorityQueue<Data> pq=new PriorityQueue<>(new Comparator<Data>(){
            public int compare(Data a, Data b){
                if(a.time<b.time) return -1;
                if(a.time>b.time) return 1;
                return 0;
            }
        });


        pq.add(new Data(0,0,0));
        int[][] distance=new int[n][m];
        for(int[] row:distance){
            Arrays.fill(row,Integer.MAX_VALUE);
        }

        distance[0][0]=0;

        while(!pq.isEmpty()){
            Data d=pq.remove();
            int row=d.row;
            int col=d.col;
            int time=d.time;

            if(row==n-1 && col==m-1) return distance[n-1][m-1];

            int[] delrow={0,1,0,-1};
            int[] delcol={1,0,-1,0};

            for(int k=0;k<4;k++){
                int nrow=row+delrow[k];
                int ncol=col+delcol[k];

                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m){

                    int additionOne=time+1;
                    if(additionOne>=grid[nrow][ncol] && distance[nrow][ncol]>additionOne){

                       distance[nrow][ncol]=additionOne;
                       pq.add(new Data(nrow,ncol,additionOne));

                    }else if(additionOne<grid[nrow][ncol]){
                        int diff=grid[nrow][ncol]-time;

                        if(diff%2==0){
                            int reqTime=grid[nrow][ncol]+1;

                            if(reqTime<distance[nrow][ncol]){
                                distance[nrow][ncol]=reqTime;
                                pq.add(new Data(nrow,ncol,reqTime));
                            }
                        }else{
                            int reqTime=grid[nrow][ncol];

                            if(reqTime<distance[nrow][ncol]){
                                distance[nrow][ncol]=reqTime;
                                pq.add(new Data(nrow,ncol,reqTime));
                            }
                        }
                    }
                }
            }
        }

        return -1;
    }
}

