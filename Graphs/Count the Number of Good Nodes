class Solution {
    int ans=0;
    
    private int dfs(int node,  List<List<Integer>> adj, int[] vis){
        vis[node]=1;
        boolean isSame=true;
        int totalCount=0;
        int count=0;
        boolean visitedFirst=false;
        
        for(int next:adj.get(node)){
            if(visitedFirst==false && vis[next]!=1){
                visitedFirst=true;
                count=dfs(next,adj,vis);
                totalCount=count;
            }else if(vis[next]!=1){
                int nextChildCount=dfs(next,adj,vis);
                if(nextChildCount!=count) isSame=false;
                totalCount+=nextChildCount;
            }
        }
        
        if(isSame==true) ans++;
        
        return totalCount+1;
    }
    public int countGoodNodes(int[][] edges) {
        int n=edges.length+1;
        
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        
        for(int i=0;i<edges.length;i++){
            int u=edges[i][0];
            int v=edges[i][1];
            
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        
        int[] vis=new int[n];
        int count=dfs(0,adj,vis);
        return ans;
    }
}

