class Pair{
    int node;
    int distance;

    public Pair(int node, int distance){
        this.node=node;
        this.distance=distance;
    }
}

class Solution {
    private int dijkstras(int start, int end, List<List<Integer>> adj){
        int n=adj.size();
        int[] dist=new int[n];
        Arrays.fill(dist,(int)1e9);

        PriorityQueue<Pair> pq=new PriorityQueue<>(new Comparator<Pair>(){
            public int compare(Pair a, Pair b){
                if(a.distance<b.distance) return -1;
                if(a.distance>b.distance) return 1;
                return 0;
            }
        });
        
        dist[start]=0;
        pq.add(new Pair(start,0));

        while(!pq.isEmpty()){
            Pair p=pq.remove();
            int node=p.node;
            int distance=p.distance;

            if(node==end) return distance;

            for(int next:adj.get(node)){
                if(dist[next]>dist[node]+1){
                    dist[next]=dist[node]+1;
                    pq.add(new Pair(next,dist[node]+1));
                }
            }
        }

        return -1;

    }
    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }

        for(int i=0;i<n-1;i++){
            adj.get(i).add(i+1);
        }

        int m=queries.length;
        int[] ans=new int[m];

        for(int i=0;i<m;i++){
            int u=queries[i][0];
            int v=queries[i][1];
            adj.get(u).add(v);

            ans[i]=dijkstras(0,n-1,adj);
        }

        return ans;
    }
}
