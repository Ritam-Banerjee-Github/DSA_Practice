Formula : ans=ans+(currComponentSize*(totalNodes-currComponentSize)). And after each dfs, totalNodes=totalNodes-currComponentSize

class Solution {
    long ans=0;
    long totalCount=0;
    long currCount=0;
    
    private void dfs(int node,int[] vis, List<List<Integer>> adj){
        vis[node]=1;
        currCount++;
        
        for(int next:adj.get(node)){
            if(vis[next]!=1) dfs(next,vis,adj);
        }
    }

    public long countPairs(int n, int[][] edges) {
        this.totalCount=n;
        List<List<Integer>> adj=new ArrayList<>();
        
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        
        for(int i=0;i<edges.length;i++){
            int u=edges[i][0];
            int v=edges[i][1];
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        
        int[] vis=new int[n];
        
        for(int i=0;i<n;i++){
            
            if(vis[i]!=1){
                currCount=0;
                dfs(i,vis,adj);
                ans=ans+(currCount*(totalCount-currCount));
                totalCount=totalCount-currCount;
            }
        }

        return ans;
    }
}