import java.util.* ;
import java.io.*; 
class Node{
    Node links[] = new Node[26];
    boolean flag=false;
    
    boolean containsKey(char ch){
        return (links[ch-'a']!=null); 
       
    }
    Node get(char ch){
        return links[ch-'a'];
    }
    
    void put(char ch, Node node){
        links[ch-'a']=node;
    }
    
    void setEnd(){
        flag=true;
    }
    boolean isEnd(){
        return flag;
    }
}
 class Trie{
     Node root;
    
    public Trie(){
        root=new Node();
    }
    public void insert(String word){
     Node node=root;
        for(int i=0;i<word.length();i++){
            if(node.containsKey(word.charAt(i))==false){
                node.put(word.charAt(i),new Node());
            }
                node=node.get(word.charAt(i));
        }
        node.setEnd();
    }
    
    public boolean checkIfAllPrefixExists(String word){
       boolean flag=true;
         Node node=root;
        for(int i=0;i<word.length();i++){
            if(node.containsKey(word.charAt(i))){
                node=node.get(word.charAt(i));
                if(node.isEnd()==false) return false;
            }
            else{
                return false;
                 }
            }
        return true;
    }
    
}
class Solution {

  public static String completeString(int n, String[] arr) {
    // Write your code here.
        Trie trie=new Trie();
        for(String it: arr){
            trie.insert(it);
        }
        String longest="";
        for(String it: arr){
            if(trie.checkIfAllPrefixExists(it)==true){
                if(it.length()>longest.length()){
                    longest=it;
                }
                else if(it.length()==longest.length() && it.compareTo(longest)<0){
                    longest=it;
                }
            }
        }
        
        if(longest=="") return "None";
        return longest;
  }
}