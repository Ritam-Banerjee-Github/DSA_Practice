//Approach - BFS (asking for minimum moves - and problem different states)
//T.C : O(6!) : The puzzle has 6 ! = 720 possible permutations of the board, as there are 6 tiles, including the blank tile (0). In the worst case, BFS explores all permutations.
//S.C : O(6!) All states are stored in map
class Solution {
    public int slidingPuzzle(int[][] board) {
        StringBuilder start=new StringBuilder();
        for(int i=0;i<2;i++){
            for(int j=0;j<3;j++){
                start.append(board[i][j]);
            }
        }

        String finalState="123450";

        Queue<String> q=new LinkedList<>();
        q.add(start.toString());
        Set<String> visited=new HashSet<>();
        visited.add(start.toString());
        
        int ans=0;

        Map<Integer, int[]> mp = new HashMap<>();
        mp.put(0, new int[]{1, 3});
        mp.put(1, new int[]{0, 2, 4});
        mp.put(2, new int[]{1, 5});
        mp.put(3, new int[]{0, 4});
        mp.put(4, new int[]{1, 3, 5});
        mp.put(5, new int[]{2, 4});


        while(!q.isEmpty()){

            int length=q.size();
            
            for(int j=0;j<length;j++){

                String curr=q.remove();

                if(curr.equals(finalState)) return ans;

                int indexOfZero=-1;

                for(int i=0;i<6;i++){
                    if(curr.charAt(i)=='0'){
                        indexOfZero=i;
                        break;
                    }
                }

                for(int swapIndex : mp.get(indexOfZero)){
                    StringBuilder sb=new StringBuilder(curr);
                    sb.setCharAt(indexOfZero,sb.charAt(swapIndex));
                    sb.setCharAt(swapIndex,'0');
                    String newState=sb.toString();

                    if(!visited.contains(newState)){
                        q.add(newState);
                        visited.add(newState);
                    }
                }

            }
            
            ans++;

        }

        return -1;
    }
}
