Brute Force : O(N^2) - 95 / 101 test cases passed. Status: Time Limit Exceeded
class Solution {
    public int maxWidthRamp(int[] nums) {
        int n=nums.length;
        int ans=0;
        
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(nums[i]<=nums[j]){
                    ans=Math.max(ans,j-i);
                }
            }
        }
        
        return ans;
    }
}

Better : O(N^2)  - 99 / 101 test cases passed. Status: Time Limit Exceeded
class Solution {
    public int maxWidthRamp(int[] nums) {
        int n=nums.length;
        int ans=0;
        
        for(int i=0;i<n;i++){
            for(int j=n-1;j>i;j--){
                if(j-i <ans) break;
                
                if(nums[i]<=nums[j]){
                    ans=Math.max(ans,j-i);
                }
            }
        }
        
        return ans;
    }
}

Optimal : Monotonic stack
class Solution {
    public int maxWidthRamp(int[] nums) {
        int n = nums.length;
        Stack<Integer> stack = new Stack<>();

        // Step 1: Build a monotonic decreasing stack of indices
        for (int i = 0; i < n; i++) {
            if (stack.isEmpty() || nums[stack.peek()] > nums[i]) {
                stack.push(i);
            }
        }

        int maxWidth = 0;

        // Step 2: Traverse from the end of the array and check for ramps
        for (int j = n - 1; j >= 0; j--) {
            // While the top of the stack can form a valid ramp with nums[j], pop it
            while (!stack.isEmpty() && nums[stack.peek()] <= nums[j]) {
                maxWidth = Math.max(maxWidth, j - stack.pop());
            }
        }

        return maxWidth;
    }
}
