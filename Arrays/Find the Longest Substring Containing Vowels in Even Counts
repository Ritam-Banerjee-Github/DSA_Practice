Note : Similar to Longest length of subarray with sum=target.

class Solution {
    public int findTheLongestSubstring(String s) {
        int ans=0;
        int n=s.length();
        int[] vowels=new int[5];
        Map<String,Integer> map=new HashMap<>();
        map.put("00000",-1);
        
        for(int i=0;i<n;i++){
          if(s.charAt(i)=='a'){
            vowels[0]=(vowels[0]+1)%2;  
          }
            
          if(s.charAt(i)=='e'){
            vowels[1]=(vowels[1]+1)%2;  
          }
            
          if(s.charAt(i)=='i'){
            vowels[2]=(vowels[2]+1)%2;  
          }
            
          if(s.charAt(i)=='o'){
            vowels[3]=(vowels[3]+1)%2;  
          }
            
          if(s.charAt(i)=='u'){
            vowels[4]=(vowels[4]+1)%2;  
          }
            
          String currState="";   //Arrays.toString(vowels) includes commas and spaes which was not matching
          for(int j=0;j<5;j++){
              currState+=vowels[j];
          }  
            
          if(map.containsKey(currState)){
              ans=Math.max(ans,i-map.get(currState));
          }else{
              map.put(currState,i);
          }  
            
        }
        
        return ans;
    }
}
