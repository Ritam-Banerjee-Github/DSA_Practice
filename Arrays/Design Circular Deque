class MyCircularDeque {
    
    int[] design;
    int capacity;
    int count=0;
    int front;
    int last;
    
    
    public MyCircularDeque(int k) {
        design=new int[k];
        capacity=k;
        front=0;
        last=k-1;
    }
    
    public boolean insertFront(int value) {
        if(isFull()) return false;
        front=(front-1+capacity)%capacity;
        design[front]=value;
        count++;
        return true;
    }
    
    public boolean insertLast(int value) {
        if(isFull()) return false;
        last=(last+1)%capacity;
        design[last]=value;
        count++;
        return true;
    }
    
    public boolean deleteFront() {
        if(isEmpty()) return false;
        front=(front+1)%capacity;
        count--;
        return true;
    }
    
    public boolean deleteLast() {
        if(isEmpty()) return false;
        last=(last-1+capacity)%capacity;
        count--;
        return true;
    }
    
    public int getFront() {
        if(isEmpty()) return -1;
        return design[front];
    }
    
    public int getRear() {
        if(isEmpty()) return -1;
        return design[last];
    }
    
    public boolean isEmpty() {
        return count==0;
    }
    
    public boolean isFull() {
        return count==capacity;
    }
}

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */
