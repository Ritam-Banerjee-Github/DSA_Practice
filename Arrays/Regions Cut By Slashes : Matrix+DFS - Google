class Solution {
    private void dfs(int i, int j, int[][] vis, int[][] matrix) {
        vis[i][j]=1;
        int[] delrow={0,1,0,-1};
        int[] delcol={1,0,-1,0};

        for (int k=0;k<4;k++) {
            int nrow = i + delrow[k];
            int ncol = j + delcol[k];
            if(nrow>=0 && nrow<matrix.length && ncol>=0 && ncol<matrix[0].length && matrix[nrow][ncol]==0 && vis[nrow][ncol]==0){
            dfs(nrow, ncol, vis, matrix);
            }
        }
    }

    public int regionsBySlashes(String[] grid) {
        int row = grid.length;
        int col = grid[0].length();
        
        int[][] matrix = new int[row*3][col*3];

       for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(grid[i].charAt(j)=='\\'){                       
                    matrix[i*3][j*3]=1;
                    matrix[i*3 +1][j*3 +1]=1;
                    matrix[i*3 +2][j*3 +2]=1;
                }else if(grid[i].charAt(j)=='/'){
                    matrix[i*3][j*3 +2]=1;
                    matrix[i*3 +1][j*3 +1]=1;
                    matrix[i*3 +2][j*3]=1;
                }
            }
        }
        
         
        int[][] vis=matrix;
        int ans=0;
        
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] == 0 && vis[i][j]!=1) {
                    ans++;
                    dfs(i, j,vis, matrix);
                }
            }
        }

        return ans;
    }
}
