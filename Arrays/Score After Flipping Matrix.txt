class Solution {
    public int matrixScore(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int ans=0;
        
        //Make all rows of 0th column as 1 by flipping that whole row. As ths is most significant bit
        for(int i=0;i<n;i++){
           if(grid[i][0]==0){
               for(int j=0;j<m;j++){
                   grid[i][j]=1-grid[i][j];
               }
           }
        }
        
        //Making the maximum in other columns as 1
        for(int col=1;col<m;col++){
            int countOne=0;
            for(int row=0;row<n;row++){
                if(grid[row][col]==1) countOne++;
            }
            
            int countZero=n-countOne;
            
            if(countZero>countOne){
              for(int row=0;row<n;row++){
                  grid[row][col]=1-grid[row][col];
               }
            }
        }
        
        for(int row=0;row<n;row++){
            int value=0;
            for(int col=0;col<m;col++){
                value+=Math.pow(2,m-col-1)*grid[row][col];
            }
            ans+=value;
        }
        
        return ans;
    }
}

TC : O(n*m) + O((m-1)*2n) + O(n*m)
SC : O(1)