// IN SOME SCENARIOS, BFS HELPS IN GETTING MIN STEPS SINCE IT IS LEVEL WISE

class Solution {
    public int snakesAndLadders(int[][] board) {
        int n=board.length;
        int[][] visited= new int[n][n];
        int ans=0;

        visited[n-1][0]=1;
        Queue<Integer> q=new LinkedList<>();
        q.add(1);

        while(!q.isEmpty()){
            int size=q.size();

            for(int i=0;i<size;i++){
                int value=q.remove();

                if(value==n*n) return ans;

                for(int k=1;k<=6;k++){
                    int next=value+k;
                    if(next>n*n) break;

                    int[] coordinates=  getCoord(next,n);
                    int row=coordinates[0];
                    int col=coordinates[1];

                    if(visited[row][col]==1) continue;

                    visited[row][col]=1;

                    if(board[row][col]!=-1){
                        q.add(board[row][col]);
                    }else{
                        q.add(next);
                    }

                }
            }

            ans++;
        }
        return -1;
    }

     private int[] getCoord(int s, int n) {
        int row = n - 1 - (s - 1) / n;
        int col = (s - 1) % n;
        
        if ((n % 2 == 1 && row % 2 == 1) || (n % 2 == 0 && row % 2 == 0)) {
            col = n - 1 - col;
        }
        
        return new int[]{row, col};
    }

}
