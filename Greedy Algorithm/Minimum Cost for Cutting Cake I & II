class Solution {
    public int minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {
        int ans=0;   //only change type to long for part 2 problem
        int x=horizontalCut.length; 
        int y=verticalCut.length;
        
        int horizontalPieces=1;
        int verticalPieces=1;
        
        int i=x-1; //Start from the largest element. GREEDY!
        int j=y-1;
        
        Arrays.sort(horizontalCut);
        Arrays.sort(verticalCut);
        
        while(i>=0 && j>=0){
            if(horizontalCut[i]>=verticalCut[j]){
                ans+=horizontalCut[i]*verticalPieces;
                horizontalPieces++;
                i--;
            }else if(horizontalCut[i]<verticalCut[j]){
                ans+=verticalCut[j]*horizontalPieces;
                verticalPieces++;
                j--;
            }
        }
        
        while(i>=0){
            ans+=horizontalCut[i]*verticalPieces;
            horizontalPieces++;
            i--;
        }
        
         while(j>=0){
            ans+=verticalCut[j]*horizontalPieces;
            verticalPieces++;
            j--;
        }
        
        
        return ans;
    }
}
