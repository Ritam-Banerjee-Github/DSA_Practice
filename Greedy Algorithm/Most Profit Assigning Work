Brute Solution :
class Pair{
    int difficulty;
    int profit;
    
    public Pair(int difficulty, int profit){
        this.difficulty=difficulty;
        this.profit=profit;
    }
}
class Solution {
    public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {
        int ans=0;
        List<Pair> list=new ArrayList<>();
        
        int n=difficulty.length;
        
        for(int i=0;i<n;i++){
            list.add(new Pair(difficulty[i],profit[i]));
        }
        
        Collections.sort(list, new Comparator<Pair>(){
           public int compare(Pair a, Pair b){
               if(a.profit>b.profit) return -1;
               if(a.profit<b.profit) return 1;
               return 0;
           } 
        });
        
        int m=worker.length;
        for(int i=0;i<m;i++){
            int ability=worker[i];
            
            for(int j=0;j<n;j++){
                if(ability>=list.get(j).difficulty){
                    ans+=list.get(j).profit;
                    break;
                }
            }
        }
        
        return ans;
    }
}

TC - O(nlogn) + O(n*m)

