class JobComparator implements Comparator<Job>{
    @Override
    public int compare(Job x, Job y){
        if(x.profit>y.profit){
            return -1;
        }
        else
        if(x.profit<y.profit){
            return 1;
        }
        else
        return 0;
    }
}
class Solution
{
    //Function to find the maximum profit and the number of jobs done.
    int[] JobScheduling(Job arr[], int n)
    {
        // Your code here
        JobComparator jc=new JobComparator();
        Arrays.sort(arr,jc);
        int ans[]=new int[2];
        int cntJobs=0,maxprofit=0,maxDeadline=0;
        
        for(int i=0;i<n;i++){
            if(arr[i].deadline>maxDeadline){
                maxDeadline=arr[i].deadline;
            }
        }
        int[] jobs=new int[maxDeadline+1];
        for(int i=1;i<maxDeadline+1;i++){
            jobs[i]=-1;
        }
        for(int i=0;i<n;i++){
            for(int j=arr[i].deadline;j>0;j--){
                if(jobs[j]==-1){
                    jobs[j]=arr[i].id;
                    cntJobs++;
                    maxprofit+=arr[i].profit;
                    break;  // after finding first occurence
                }
            }
        }
        ans[0]=cntJobs;
        ans[1]=maxprofit;
        return ans;
    }
}

/*
class Job {
    int id, profit, deadline;
    Job(int x, int y, int z){
        this.id = x;
        this.deadline = y;
        this.profit = z; 
    }
}
*/


Time Complexity: O(NlogN) for sorting + O(N*m) for iterating through each jobs and then interating through deadlines.
Auxilliary Space: O(N)