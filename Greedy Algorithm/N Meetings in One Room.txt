class Meeting{
    int number;
    int start;
    int end;
    public  Meeting(int start, int end, int number){
        this.start=start;
        this.end=end;
        this.number=number;
    }
}
class Solution 
{
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    public static int maxMeetings(int start[], int end[], int n)
    {
        // add your code here
        ArrayList<Meeting> meet=new ArrayList<Meeting>();
        for(int i=0;i<n;i++){
            meet.add(new Meeting(start[i],end[i],i+1));
        }
        Collections.sort(meet,new Comparator<Meeting>(){
            public int compare(Meeting a, Meeting b){
                if(a.end>b.end) return 1;
                else
                if(a.end<b.end) return -1;
                else
                if(a.number>b.number) return 1;
                else
                return -1;
            }
        });
        
        int lastTime=meet.get(0).end;
        int ans=1;
        for(int i=1;i<n;i++){
            if(meet.get(i).start>lastTime){
                ans++;
                lastTime=meet.get(i).end;
            }
        }
        
        
        return ans;
    }
}

TC - Time Complexity: O(n) to iterate through every position and insert them in a data structure. O(n log n)  to sort the data structure in ascending order of end time. O(n)  to iterate through the positions and check which meeting can be performed.

Overall : O(n) +O(n log n) + O(n) ~O(n log n)

SC - O(1)