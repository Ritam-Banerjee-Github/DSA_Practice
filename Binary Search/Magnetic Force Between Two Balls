class Solution {
    private boolean isPossible(int mid,int[] position, int m){
        int count=1;
        int prev=position[0];
        
        for(int i=1;i<position.length;i++){
            int current=position[i];
            
            if((current-prev)>=mid){
                count++;
                prev=current;
            }
            
            if(count==m) return true;
        }
        
        return false;
    }
    public int maxDistance(int[] position, int m) {
        int n=position.length;
        Arrays.sort(position);
        
        int min=position[0];
        int max=position[n-1];
    
        
        int maxDiff=Math.abs(max-min);
        
        int high=maxDiff;
        int low=0;
        
        int ans=0;
        while(low<=high){
            int mid=low +(high-low)/2;
            if(isPossible(mid,position,m)){
                ans=mid;
                low=mid+1;
            }else{
                high=mid-1;
            }
            
        }
        
        return ans;
    }
}
