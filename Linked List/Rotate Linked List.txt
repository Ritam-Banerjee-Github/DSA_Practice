class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head==null || head.next==null) return head;
        
        ListNode tail=head;
        int count=0;
        
        while(tail.next !=null){
            count++;
            tail=tail.next;
        }
        
        count++; // Last node not counted.
        
        k=k%count;
        if(k==0) return head;
        
        tail.next=head;
        
        ListNode temp=head;
        int requiredPosition=count-k;
        requiredPosition--;
        
        while(requiredPosition>0){
            requiredPosition--;
            if(temp!=null){
                temp=temp.next;
            }
            
        }
        
        head=temp.next;
        temp.next=null;
        
        return head;
    }
}

Time Complexity: O(length of list) + O(length of list – (length of list%k))

Reason: O(length of the list) for calculating the length of the list. O(length of the list – (length of list%k)) for breaking link.

Space Complexity: O(1)

Reason: No extra data structure is used for computation.