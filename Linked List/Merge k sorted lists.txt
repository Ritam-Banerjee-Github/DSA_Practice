class Pair{
    int value;
    ListNode node;
    
    public Pair(int value, ListNode node){
        this.value=value;
        this.node=node;
    }
}
class Solution {
    public ListNode mergeKLists(ListNode[] lists) { 
        PriorityQueue<Pair> pq=new PriorityQueue<>(new Comparator<Pair>(){
           public int compare(Pair a, Pair b){
               if(a.value>b.value) return 1;
               return -1;
           } 
        });
        
        for(int i=0;i<lists.length;i++){
            if(lists[i]!=null) pq.add(new Pair(lists[i].val,lists[i]));
        }
        
        ListNode dummy=new ListNode(-1);
        ListNode temp=dummy;
        
        while(!pq.isEmpty()){
            Pair p=pq.peek();
            pq.poll();
            
            ListNode newNode=p.node;
            temp.next=newNode;
            temp=temp.next;
            
            if(newNode.next!=null){
                pq.add(new Pair(newNode.next.val,newNode.next));
            }
        }
        
        return dummy.next;
    }
}