Here, for a linked list with size n, fast will move two steps and slow will move one step. So when fast move out of the last index, slow will point to n/2 node for a 0 based indexing linked list. We will keep a prev pointer to slow and point prev.next to slow's next

**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteMiddle(ListNode head) {
        if(head ==null || head.next==null) return null;

        ListNode prev=null;
        ListNode slow=head;
        ListNode fast=head;

        while(fast != null && fast.next != null){
            prev=slow;
            slow=slow.next;
            fast=fast.next.next;
        }
        prev.next=slow.next;
        return head;


    }
}