class Solution {
    private ListNode reverse(ListNode currHead){
        ListNode temp=currHead;
        ListNode prev=null;
        while(temp!=null){
            ListNode currNext=temp.next;
            temp.next=prev;
            prev=temp;
            temp=currNext;
        }
        
        return prev;
    }
    private ListNode getKthNode(ListNode node, int k){
        k=k-1;
        
        ListNode temp=node;
        
        while(temp!=null && k>0){
            k--;
            temp=temp.next;
        }
        
        return temp;
    }
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode temp=head;
        ListNode prevLastNode=null;
        
        while(temp!=null){
            ListNode kthNode=getKthNode(temp,k);
            
            if(kthNode==null){
                if(prevLastNode!=null){
                    prevLastNode.next=temp;
                }
                break;
            }
            
            ListNode nextHead=kthNode.next;
            kthNode.next=null;
            
            ListNode newHead=reverse(temp);
            
            if(temp==head){
               head=newHead;   
            }else{
                prevLastNode.next=kthNode;
            }
            
            prevLastNode=temp;
            
            temp=nextHead;
        }
        
        return head;
    }
}

Time Complexity: O(2N) The time complexity consists of actions of reversing segments of K and finding the Kth node which operates in linear time. Thus, O(N) + O(N) = O(2N), which simplifies to O(N).

Space Complexity: O(1) The space complexity is O(1) as the algorithm operates in place without any additional space requirements.