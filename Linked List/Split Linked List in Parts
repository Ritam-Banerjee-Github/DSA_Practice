/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode[] splitListToParts(ListNode head, int k) {
        int size=0;
        ListNode temp=head;
        while(temp!=null){
            size++;
            temp=temp.next;
        }
        
        int sizeOfEachGroup=size/k;
        int extra=size%k;
        
        ListNode[] ans=new ListNode[k];
        
        ListNode currHead=head;
        ListNode lastNode=head;
        ListNode prev=lastNode;
        
        for(int i=0;i<k;i++){
            if(currHead==null) break;
            ans[i]=currHead;
            
            int currGroupSize=sizeOfEachGroup;
            while(lastNode!=null && currGroupSize>0){
                prev=lastNode;
                lastNode=lastNode.next;
                currGroupSize--;
            }
            
            if(extra>0){
                extra--;
                prev=lastNode;
                lastNode=lastNode.next;
            }
            
            prev.next=null;
            currHead=lastNode;
        }
        
        return ans;
    }
}
