import java.util.*;
public class Solution {
    private static void solve(int col,int n,List<List<Integer>> ans,int[] board,
    int[] leftrow,int[] lowerDiag,int[] upperDiag){
          if(col==n){
              List<Integer> temp=new ArrayList<>();
              for(int i:board){
                  temp.add(i);
              }
              ans.add(temp);
              return;
          }

          for(int i=0;i<n;i++){
              if(leftrow[i]==0 && lowerDiag[i+col]==0 && upperDiag[n-1+col-i]==0){
                  board[n*i+col]=1;
                  leftrow[i]=1;
                  lowerDiag[i+col]=1;
                  upperDiag[n-1+col-i]=1;
                  solve(col+1,n,ans,board,leftrow,lowerDiag,upperDiag);
                  board[n*i+col]=0;
                  leftrow[i]=0;
                  lowerDiag[i+col]=0;
                  upperDiag[n-1+col-i]=0;

              }
          }
    }
    public static List< List< Integer > > nQueens(int n)
    {
        // Write your code here.
        List<List<Integer>> ans=new ArrayList<>();
    
        int[] board=new int[n*n];
        int[] leftrow=new int[n];
        int[] lowerDiag=new int[2*n-1];
        int[] upperDiag=new int[2*n-1];
        solve(0,n,ans,board,leftrow,lowerDiag,upperDiag);
        return ans;

    }
}

Time Complexity: Exponential in nature since we are trying out all ways, to be precise its O(N! * N).

Space Complexity: O(N)