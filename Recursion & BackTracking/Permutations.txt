class Solution {
    List<List<Integer>> ans=new ArrayList<>();
    HashSet<Integer> set=new HashSet<>();

    private void solve(HashSet<Integer> set,int[] nums,List<Integer> temp){
        if(temp.size()==nums.length){
            ans.add(new ArrayList<>(temp));
            return;
        }
        
        for(int i=0;i<nums.length;i++){
            if(!set.contains(nums[i])){
                set.add(nums[i]);
                temp.add(nums[i]);
                solve(set,nums,temp);
                set.remove(nums[i]);
                temp.remove(temp.size()-1);
            }
        }
    }

    public List<List<Integer>> permute(int[] nums) {
        List<Integer> temp=new ArrayList<>();
        solve(set,nums,temp);
        return ans;
    }
}

OR

class Solution {
    List<List<Integer>> ans=new ArrayList<>();
    HashSet<Integer> set=new HashSet<>();
    List<Integer> temp=new ArrayList<>();

    private void solve(int[] nums){
        if(temp.size()==nums.length){
            ans.add(new ArrayList<>(temp));
            return;
        }
        
        for(int i=0;i<nums.length;i++){
            if(!set.contains(nums[i])){
                set.add(nums[i]);
                temp.add(nums[i]);
                solve(nums);
                set.remove(nums[i]);
                temp.remove(temp.size()-1);
            }
        }
    }

    public List<List<Integer>> permute(int[] nums) {
        
        solve(nums);
        return ans;
    }
}